<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MoneyFund Volume Bot</title>
    <script src="https://cdn.jsdelivr.net/npm/web3@1.6.0/dist/web3.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Manrope:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            text-rendering: optimizeLegibility;
        }

        body {
            font-family: 'Manrope', sans-serif;
            background: linear-gradient(135deg, #0A0C1E, #1F2A44);
            color: #E5E7EB;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            padding: clamp(12px, 2vw, 24px);
            position: relative;
            overflow-x: hidden;
        }

        .main-panel {
            background: rgba(17, 24, 39, 0.95);
            border-radius: 16px;
            padding: clamp(12px, 2vw, 24px);
            border: 1px solid rgba(99, 102, 241, 0.2);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
            max-width: 600px;
            width: 100%;
        }

        h1 {
            color: #FFFFFF;
            font-size: clamp(1.5rem, 4vw, 1.8rem);
            font-weight: 700;
            text-align: center;
            margin-bottom: 24px;
            line-height: 1.5;
        }

        .input-group {
            margin-bottom: 16px;
        }

        .input-group label {
            display: block;
            color: #A5F3FC;
            font-size: 14px;
            font-weight: 500;
            margin-bottom: 4px;
            line-height: 1.5;
        }

        input, select {
            width: 100%;
            padding: 12px;
            border: 1px solid rgba(99, 102, 241, 0.2);
            border-radius: 8px;
            background: rgba(17, 24, 39, 0.9);
            color: #E5E7EB;
            font-size: 16px;
            font-weight: 400;
            line-height: 1.5;
            transition: border 0.3s, box-shadow 0.3s;
        }

        input:hover, select:hover {
            border-color: rgba(99, 102, 241, 0.4);
            box-shadow: 0 0 6px rgba(99, 102, 241, 0.3);
        }

        input:focus, select:focus {
            border-color: #6366F1;
            box-shadow: 0 0 8px rgba(99, 102, 241, 0.5);
            outline: none;
        }

        input::placeholder {
            color: #9CA3AF;
            font-weight: 400;
            opacity: 1;
        }

        select {
            appearance: none;
            background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23E5E7EB%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E');
            background-repeat: no-repeat;
            background-position: right 12px center;
            background-size: 10px;
            padding-right: 32px;
        }

        button {
            width: 100%;
            padding: 12px;
            margin: 12px 0;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            background: linear-gradient(90deg, #4F46E5, #A855F7);
            color: #F9FAFB;
            transition: background 0.3s, transform 0.2s;
            line-height: 1.5;
            min-height: 44px;
            display: flex;
            justify-content: center;
            align-items: center;
            text-align: center;
        }

        button:hover {
            background: linear-gradient(90deg, #4338CA, #9333EA);
            transform: scale(1.02);
        }

        button:disabled {
            background: rgba(75, 85, 99, 0.6);
            cursor: not-allowed;
            transform: none;
        }

        #walletAddress {
            margin: 10px 0;
            font-size: 14px;
            color: #E5E7EB;
            text-align: center;
            line-height: 1.5;
        }

        #status {
            margin-top: 20px;
            font-weight: 500;
            text-align: center;
            color: #E5E7EB;
            font-size: 16px;
            line-height: 1.5;
        }

        #log {
            margin-top: 20px;
            max-height: 200px;
            overflow-y: auto;
            border: 1px solid rgba(99, 102, 241, 0.2);
            padding: 10px;
            font-size: 14px;
            background: rgba(17, 24, 39, 0.9);
            color: #E5E7EB;
            border-radius: 8px;
            line-height: 1.5;
        }

        #log::-webkit-scrollbar {
            width: 6px;
        }

        #log::-webkit-scrollbar-thumb {
            background: rgba(99, 102, 241, 0.4);
            border-radius: 3px;
        }

        @media (max-width: 768px) {
            body {
                padding: 10px;
            }

            .main-panel {
                padding: 15px;
            }

            h1 {
                font-size: clamp(1.2rem, 4vw, 1.5rem);
            }

            input, select, button {
                padding: 10px;
                font-size: clamp(14px, 4vw, 16px);
            }

            .input-group {
                margin-bottom: 12px;
            }
        }

        @media (max-width: 480px) {
            input, select, button {
                padding: 8px;
                font-size: clamp(12px, 3.5vw, 14px);
            }

            .input-group {
                margin-bottom: 10px;
            }

            button {
                min-height: 40px;
            }
        }
    </style>
</head>
<body>
    <div class="main-panel">
        <h1>MoneyFund Volume Bot</h1>
        <div class="input-group">
            <label for="walletSelector">Select Wallet</label>
            <select id="walletSelector" onchange="autoBuyInterface.selectWallet(this.value)">
                <option value="">-- Select Wallet --</option>
            </select>
        </div>
        <p id="walletAddress"></p>
        <div class="input-group">
            <label for="tokenAddress">Contract Address to Pump</label>
            <input type="text" id="tokenAddress" value="0x100DB67F41A2dF3c32cC7c0955694b98339B7311" placeholder="Enter token address">
        </div>
        <div class="input-group">
            <label for="totalEth">ETH Spending Limit</label>
            <input type="number" id="totalEth" placeholder="e.g., 1" step="0.001" min="0">
        </div>
        <div class="input-group">
            <label for="ethPerTx">ETH per Transaction</label>
            <input type="number" id="ethPerTx" placeholder="e.g., 0.1" step="0.001" min="0">
        </div>
        <button id="startAutoBuyBtn">Start Volume</button>
        <button id="stopAutoBuyBtn" disabled>Stop Volume</button>
        <div id="status">Status: Not started</div>
        <div id="log"></div>
    </div>

    <script>
        let selectedWallet = null;

        function logMessage(message) {
            const logDiv = document.getElementById('log');
            const entry = document.createElement('p');
            entry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
            logDiv.appendChild(entry);
            logDiv.scrollTop = logDiv.scrollHeight;
        }

        class AutoBuyInterface {
            constructor() {
                this.web3 = new Web3("https://mainnet.infura.io/v3/cf2916fb6dbc47ae824d6f36db817b73");
                this.uniswapRouterAddress = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D';
                this.wethAddress = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2';
                this.uniswapRouterABI = [
                    {
                        "constant": false,
                        "inputs": [
                            {"name": "amountOutMin", "type": "uint256"},
                            {"name": "path", "type": "address[]"},
                            {"name": "to", "type": "address"},
                            {"name": "deadline", "type": "uint256"}
                        ],
                        "name": "swapExactETHForTokens",
                        "outputs": [{"name": "amounts", "type": "uint256[]"}],
                        "payable": true,
                        "stateMutability": "payable",
                        "type": "function"
                    },
                    {
                        "constant": false,
                        "inputs": [
                            {"name": "amountIn", "type": "uint256"},
                            {"name": "amountOutMin", "type": "uint256"},
                            {"name": "path", "type": "address[]"},
                            {"name": "to", "type": "address"},
                            {"name": "deadline", "type": "uint256"}
                        ],
                        "name": "swapExactTokensForETH",
                        "outputs": [{"name": "amounts", "type": "uint256[]"}],
                        "payable": false,
                        "stateMutability": "nonpayable",
                        "type": "function"
                    },
                    {
                        "constant": true,
                        "inputs": [
                            {"name": "amountIn", "type": "uint256"},
                            {"name": "path", "type": "address[]"}
                        ],
                        "name": "getAmountsOut",
                        "outputs": [{"name": "amounts", "type": "uint256[]"}],
                        "payable": false,
                        "stateMutability": "view",
                        "type": "function"
                    }
                ];
                this.erc20ABI = [
                    {"constant": true, "inputs": [{"name": "_owner", "type": "address"}], "name": "balanceOf", "outputs": [{"name": "balance", "type": "uint256"}], "type": "function"},
                    {"constant": false, "inputs": [{"name": "_spender", "type": "address"}, {"name": "_value", "type": "uint256"}], "name": "approve", "outputs": [{"name": "success", "type": "bool"}], "type": "function"}
                ];
                this.uniswapRouter = new this.web3.eth.Contract(this.uniswapRouterABI, this.uniswapRouterAddress);
                this.wallets = [];
                this.isRunning = false;
                this.slippageTolerance = 1; // 1% slippage
                this.gasLimit = 500000;
            }

            init() {
                this.loadWalletsFromStorage();
                this.attachEventListeners();
            }

            attachEventListeners() {
                document.getElementById('startAutoBuyBtn').addEventListener('click', () => this.startAutoBuy());
                document.getElementById('stopAutoBuyBtn').addEventListener('click', () => this.stopAutoBuy());
            }

            loadWalletsFromStorage() {
                this.wallets = JSON.parse(localStorage.getItem('wallets') || '[]');
                const selector = document.getElementById('walletSelector');
                selector.innerHTML = '<option value="">-- Select Wallet --</option>';
                this.wallets.forEach((wallet, index) => {
                    const option = document.createElement('option');
                    option.value = index;
                    option.textContent = `${wallet.address.slice(0, 6)}...${wallet.address.slice(-4)} (${wallet.type})`;
                    selector.appendChild(option);
                });
                if (this.wallets.length > 0) {
                    selectedWallet = this.wallets[0];
                    selector.value = 0;
                    this.updateWalletDisplay();
                }
            }

            selectWallet(index) {
                const idx = parseInt(index);
                if (idx >= 0 && idx < this.wallets.length) {
                    selectedWallet = this.wallets[idx];
                    this.updateWalletDisplay();
                } else {
                    selectedWallet = null;
                    document.getElementById('walletAddress').textContent = '';
                }
            }

            updateWalletDisplay() {
                // Do nothing to prevent displaying the wallet address
            }

            async waitForReceipt(txHash) {
                let receipt = null;
                let attempts = 0;
                const maxAttempts = 30; // ~5 minutes with 10s intervals
                while (!receipt && attempts < maxAttempts) {
                    receipt = await this.web3.eth.getTransactionReceipt(txHash);
                    if (!receipt) {
                        await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10s
                        attempts++;
                    }
                }
                return receipt;
            }

            async buyToken(amount, tokenAddress) {
                const amountInWei = this.web3.utils.toWei(amount.toString(), 'ether');
                const path = [this.wethAddress, tokenAddress];
                const amounts = await this.uniswapRouter.methods.getAmountsOut(amountInWei, path).call();
                const amountOutMin = Math.floor(amounts[1] * (1 - this.slippageTolerance / 100)).toString();

                const baseGasPrice = await this.web3.eth.getGasPrice();
                const gasPrice = this.web3.utils.toBN(baseGasPrice).mul(this.web3.utils.toBN(15)).div(this.web3.utils.toBN(10)).toString();
                const tx = {
                    from: selectedWallet.address,
                    to: this.uniswapRouterAddress,
                    data: this.uniswapRouter.methods.swapExactETHForTokens(
                        amountOutMin,
                        path,
                        selectedWallet.address,
                        Math.floor(Date.now() / 1000) + 120
                    ).encodeABI(),
                    value: amountInWei,
                    gas: this.gasLimit,
                    gasPrice: gasPrice
                };

                logMessage(`Initiating buy of ${amount} ETH worth of token at ${tokenAddress}...`);
                try {
                    const tokenContract = new this.web3.eth.Contract(this.erc20ABI, tokenAddress);
                    const initialBalanceWei = await tokenContract.methods.balanceOf(selectedWallet.address).call();
                    const signedTx = await this.web3.eth.accounts.signTransaction(tx, selectedWallet.privateKey);
                    const txHash = await new Promise((resolve, reject) => {
                        this.web3.eth.sendSignedTransaction(signedTx.rawTransaction)
                            .on('transactionHash', resolve)
                            .on('error', (error) => reject(new Error(`Send error: ${error.message}`)));
                    });
                    logMessage(`Buy transaction sent: ${txHash}`);
                    const receipt = await this.waitForReceipt(txHash);
                    if (receipt && receipt.status) {
                        const finalBalanceWei = await tokenContract.methods.balanceOf(selectedWallet.address).call();
                        const tokenReceivedWei = this.web3.utils.toBN(finalBalanceWei).sub(this.web3.utils.toBN(initialBalanceWei));
                        const tokenReceived = this.web3.utils.fromWei(tokenReceivedWei.toString(), 'ether');
                        logMessage(`Bought ${tokenReceived} tokens: ${txHash}`);
                        return { success: true, tokenReceivedWei };
                    } else {
                        logMessage(`Buy transaction reverted: ${txHash}`);
                        return { success: false };
                    }
                } catch (error) {
                    logMessage(`Buy failed: ${error.message}`);
                    return { success: false };
                }
            }

            async sellToken(tokenAmountWei, tokenAddress) {
                const path = [tokenAddress, this.wethAddress];
                const amounts = await this.uniswapRouter.methods.getAmountsOut(tokenAmountWei, path).call();
                const amountOutMin = Math.floor(amounts[1] * (1 - this.slippageTolerance / 100)).toString();

                const tokenContract = new this.web3.eth.Contract(this.erc20ABI, tokenAddress);
                const baseGasPrice = await this.web3.eth.getGasPrice();
                const gasPrice = this.web3.utils.toBN(baseGasPrice).mul(this.web3.utils.toBN(15)).div(this.web3.utils.toBN(10)).toString();

                // Approve Uniswap Router to spend tokens
                const approveTx = {
                    from: selectedWallet.address,
                    to: tokenAddress,
                    data: tokenContract.methods.approve(this.uniswapRouterAddress, tokenAmountWei).encodeABI(),
                    gas: 100000,
                    gasPrice: gasPrice
                };

                try {
                    const signedApproveTx = await this.web3.eth.accounts.signTransaction(approveTx, selectedWallet.privateKey);
                    const approveTxHash = await new Promise((resolve, reject) => {
                        this.web3.eth.sendSignedTransaction(signedApproveTx.rawTransaction)
                            .on('transactionHash', resolve)
                            .on('error', (error) => reject(new Error(`Approve error: ${error.message}`)));
                    });
                    await this.waitForReceipt(approveTxHash);
                    logMessage(`Approval sent: ${approveTxHash}`);

                    // Sell tokens
                    const sellTx = {
                        from: selectedWallet.address,
                        to: this.uniswapRouterAddress,
                        data: this.uniswapRouter.methods.swapExactTokensForETH(
                            tokenAmountWei,
                            amountOutMin,
                            path,
                            selectedWallet.address,
                            Math.floor(Date.now() / 1000) + 120
                        ).encodeABI(),
                        gas: this.gasLimit,
                        gasPrice: gasPrice
                    };

                    const signedSellTx = await this.web3.eth.accounts.signTransaction(sellTx, selectedWallet.privateKey);
                    const sellTxHash = await new Promise((resolve, reject) => {
                        this.web3.eth.sendSignedTransaction(signedSellTx.rawTransaction)
                            .on('transactionHash', resolve)
                            .on('error', (error) => reject(new Error(`Sell error: ${error.message}`)));
                    });
                    logMessage(`Sell transaction sent: ${sellTxHash}`);
                    const receipt = await this.waitForReceipt(sellTxHash);
                    if (receipt && receipt.status) {
                        const ethReceived = this.web3.utils.fromWei(amounts[1], 'ether');
                        logMessage(`Sold tokens for ${ethReceived} ETH: ${sellTxHash}`);
                        return true;
                    } else {
                        logMessage(`Sell transaction reverted: ${sellTxHash}`);
                        return false;
                    }
                } catch (error) {
                    logMessage(`Sell failed: ${error.message}`);
                    return false;
                }
            }

            async startAutoBuy() {
                if (!selectedWallet || selectedWallet.isMetaMask) {
                    logMessage("Auto-buy/sell requires a MoneyFund wallet with a private key.");
                    return;
                }

                const tokenAddress = document.getElementById('tokenAddress').value.trim();
                const totalEth = parseFloat(document.getElementById('totalEth').value.trim());
                const ethPerTx = parseFloat(document.getElementById('ethPerTx').value.trim());

                if (!tokenAddress || !this.web3.utils.isAddress(tokenAddress)) {
                    logMessage("Please enter a valid token contract address.");
                    return;
                }

                if (!totalEth || !ethPerTx || totalEth <= 0 || ethPerTx <= 0 || ethPerTx > totalEth) {
                    logMessage("Invalid inputs: Total ETH and ETH per Tx must be > 0, and ETH per Tx <= Total ETH.");
                    return;
                }

                const ethBalanceWei = await this.web3.eth.getBalance(selectedWallet.address);
                const ethBalance = parseFloat(this.web3.utils.fromWei(ethBalanceWei, 'ether'));
                if (ethBalance < totalEth) {
                    logMessage(`Insufficient ETH balance: ${ethBalance.toFixed(6)} ETH available, ${totalEth.toFixed(6)} ETH required.`);
                    return;
                }

                document.getElementById('startAutoBuyBtn').disabled = true;
                document.getElementById('stopAutoBuyBtn').disabled = false;
                document.getElementById('status').textContent = 'Status: Running';
                this.isRunning = true;

                let remainingEth = totalEth;
                const executeNextTrade = async (isBuy = true) => {
                    if (!this.isRunning || remainingEth <= 0) {
                        this.stopAutoBuy();
                        return;
                    }

                    const amountToTrade = Math.min(ethPerTx, remainingEth);

                    if (isBuy) {
                        const buyResult = await this.buyToken(amountToTrade, tokenAddress);
                        if (buyResult.success) {
                            remainingEth -= amountToTrade;
                            const sellAmountWei = this.web3.utils.toBN(buyResult.tokenReceivedWei).mul(this.web3.utils.toBN(90)).div(this.web3.utils.toBN(100)).toString();
                            document.getElementById('status').textContent = `Status: Running (Remaining ETH: ${remainingEth.toFixed(6)})`;
                            executeNextTrade(false); // Sell next
                        } else {
                            logMessage("Buy failed, retrying in 5 seconds...");
                            setTimeout(() => executeNextTrade(true), 5000);
                        }
                    } else {
                        const tokenContract = new this.web3.eth.Contract(this.erc20ABI, tokenAddress);
                        const balanceWei = await tokenContract.methods.balanceOf(selectedWallet.address).call();
                        const sellAmountWei = this.web3.utils.toBN(balanceWei).mul(this.web3.utils.toBN(90)).div(this.web3.utils.toBN(100)).toString();
                        const success = await this.sellToken(sellAmountWei, tokenAddress);
                        if (success) {
                            executeNextTrade(true); // Buy next
                        } else {
                            logMessage("Sell failed, retrying in 5 seconds...");
                            setTimeout(() => executeNextTrade(false), 5000);
                        }
                    }
                };

                executeNextTrade(true); // Start with buy
            }

            stopAutoBuy() {
                this.isRunning = false;
                document.getElementById('startAutoBuyBtn').disabled = false;
                document.getElementById('stopAutoBuyBtn').disabled = true;
                document.getElementById('status').textContent = 'Status: Stopped';
                logMessage("Auto-buy/sell stopped.");
            }
        }

        const autoBuyInterface = new AutoBuyInterface();
        autoBuyInterface.init();
    </script>
</body>
</html>
