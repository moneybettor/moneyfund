// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract StakingPool is Ownable, ReentrancyGuard {
    using SafeERC20 for IERC20;

    uint256 public immutable FEE_PERCENT = 50; // 0.5% = 50 / 10000
    uint256 public immutable FEE_DENOMINATOR = 10000;
    address public immutable FEE_RECIPIENT = 0x9759883ea07e2cA1E2d32E97f42d254841616AB5;
    uint256 public immutable PENALTY_INITIAL_PERCENT = 3000; // 30% = 3000 / 10000
    uint256 public immutable PENALTY_DURATION = 7 days;
    uint256 public immutable PENALTY_DECREASE_PERIOD = 30 days;
    address public immutable factoryAddress;

    IERC20 public token;
    uint256 public totalStaked;
    uint256 public totalEthRewards;
    uint256 public totalTokenRewards;
    uint256 public rewardPerTokenStoredEth;
    uint256 public rewardPerTokenStoredToken;
    mapping(address => uint256) public rewardPerTokenStored;
    mapping(address => StakeInfo) public stakes;
    address[] public stakers;
    mapping(address => uint256) public stakerIndex;
    mapping(address => bool) public registeredTokens;
    address[] public rewardTokens;
    mapping(address => uint256) public tokenBalance;
    uint256 public pendingEthRewards;
    mapping(address => uint256) public pendingTokenRewards;
    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;
    mapping(address => mapping(address => uint256)) public rewards;

    struct StakeInfo {
        uint256 amount;
        uint256 userRewardPerTokenPaidEth;
        uint256 userRewardPerTokenPaidToken;
        uint256 rewardsEth;
        uint256 rewardsToken;
        uint256 stakeTimestamp;
        uint256 lastClaimTimestamp;
    }

    event Staked(address indexed token, address indexed user, uint256 amount);
    event Unstaked(address indexed token, address indexed user, uint256 amount);
    event RewardTokenAdded(address indexed poolToken, address indexed rewardToken);
    event RewardsDistributed(address indexed poolToken, address indexed rewardToken, uint256 amount);
    event RewardsClaimed(address indexed poolToken, address indexed user, address rewardToken, uint256 amount);

    constructor(address _factory, address _token) Ownable(msg.sender) {
        require(_factory != address(0), "Invalid factory address");
        require(_token != address(0), "Invalid token address");
        factoryAddress = _factory;
        token = IERC20(_token);
    }

    function stake(uint256 amount) external {
        address user = msg.sender;
        require(amount > 0, "Amount must be greater than 0");

        StakeInfo storage stakeInfo = stakes[user];
        updateReward(user);

        if (stakeInfo.amount == 0) {
            stakers.push(user);
            stakerIndex[user] = stakers.length - 1;
        }

        stakeInfo.amount += amount;
        stakeInfo.stakeTimestamp = block.timestamp;
        totalStaked += amount;

        emit Staked(address(token), user, amount);
    }

    function rewardPerToken(address rewardToken) internal view returns (uint256) {
        if (totalStaked == 0) {
            return rewardToken == address(0)
                ? rewardPerTokenStoredEth
                : rewardPerTokenStored[rewardToken];
        }

        if (rewardToken == address(0)) {
            return rewardPerTokenStoredEth + ((pendingEthRewards * 1e18) / totalStaked);
        } else {
            return
                rewardPerTokenStored[rewardToken] +
                (((IERC20(rewardToken).balanceOf(address(this)) - tokenBalance[rewardToken]) * 1e18) / totalStaked);
        }
    }

    function updateReward(address user) internal {
        StakeInfo storage stakeInfo = stakes[user];

        rewardPerTokenStoredEth = rewardPerToken(address(0));
        if (stakeInfo.amount > 0) {
            stakeInfo.rewardsEth +=
                (stakeInfo.amount *
                    (rewardPerTokenStoredEth - stakeInfo.userRewardPerTokenPaidEth)) /
                1e18;
        }
        stakeInfo.userRewardPerTokenPaidEth = rewardPerTokenStoredEth;

        rewardPerTokenStoredToken = rewardPerToken(address(token));
        if (stakeInfo.amount > 0) {
            stakeInfo.rewardsToken +=
                (stakeInfo.amount *
                    (rewardPerTokenStoredToken -
                        stakeInfo.userRewardPerTokenPaidToken)) /
                1e18;
        }
        stakeInfo.userRewardPerTokenPaidToken = rewardPerTokenStoredToken;

        for (uint256 i = 0; i < rewardTokens.length; i++) {
            address rewardToken = rewardTokens[i];
            rewardPerTokenStored[rewardToken] = rewardPerToken(rewardToken);
            if (stakeInfo.amount > 0) {
                rewards[user][rewardToken] +=
                    (stakeInfo.amount *
                        (rewardPerTokenStored[rewardToken] -
                            userRewardPerTokenPaid[user][rewardToken])) /
                    1e18;
            }
            userRewardPerTokenPaid[user][rewardToken] = rewardPerTokenStored[rewardToken];
        }

        address[] memory tokensToCheck = new address[](rewardTokens.length + 1);
        tokensToCheck[0] = address(token);
        for (uint256 i = 0; i < rewardTokens.length; i++) {
            tokensToCheck[i + 1] = rewardTokens[i];
        }

        for (uint256 i = 0; i < tokensToCheck.length; i++) {
            address possible = tokensToCheck[i];
            uint256 bal = IERC20(possible).balanceOf(address(this));
            uint256 delta = bal - tokenBalance[possible];
            if (delta > 0) {
                pendingTokenRewards[possible] += delta;
                tokenBalance[possible] = bal;
            }
            if (!registeredTokens[possible] && bal > 0) {
                registeredTokens[possible] = true;
                rewardTokens.push(possible);
                tokenBalance[possible] = bal;
                pendingTokenRewards[possible] += bal;
                emit RewardTokenAdded(address(token), possible);
            }
        }
    }

    function claimRewards() external nonReentrant {
        StakeInfo storage stakeInfo = stakes[msg.sender];
        require(stakeInfo.amount > 0, "No stake to claim rewards");

        updateReward(msg.sender);

        uint256 ethReward = stakeInfo.rewardsEth;
        if (ethReward > 0) {
            uint256 fee = (ethReward * FEE_PERCENT) / FEE_DENOMINATOR;
            uint256 ethRewardAfterFee = ethReward - fee;
            stakeInfo.rewardsEth = 0;
            uint256 availableBalance = address(this).balance;
            if (ethRewardAfterFee > availableBalance) {
                ethRewardAfterFee = availableBalance;
            }
            if (fee > ethRewardAfterFee) {
                fee = ethRewardAfterFee;
            }
            if (fee > 0 && availableBalance >= fee) {
                payable(FEE_RECIPIENT).transfer(fee);
            }
            if (ethRewardAfterFee > 0 && availableBalance >= ethRewardAfterFee) {
                payable(msg.sender).transfer(ethRewardAfterFee);
            }
            pendingEthRewards -= (ethRewardAfterFee + fee);
            emit RewardsClaimed(address(token), msg.sender, address(0), ethRewardAfterFee);
        }

        for (uint256 i = 0; i < rewardTokens.length; i++) {
            address rewardToken = rewardTokens[i];
            uint256 tokenReward = rewardToken == address(token)
                ? stakeInfo.rewardsToken
                : rewards[msg.sender][rewardToken];
            if (tokenReward > 0) {
                uint256 actualBalance = IERC20(rewardToken).balanceOf(address(this));
                if (tokenReward > actualBalance) {
                    tokenReward = actualBalance;
                }
                if (tokenReward > tokenBalance[rewardToken]) {
                    tokenReward = tokenBalance[rewardToken];
                }
                uint256 fee = (tokenReward * FEE_PERCENT) / FEE_DENOMINATOR;
                uint256 tokenRewardAfterFee = tokenReward - fee;
                if (rewardToken == address(token)) {
                    stakeInfo.rewardsToken = 0;
                } else {
                    rewards[msg.sender][rewardToken] = 0;
                }
                tokenBalance[rewardToken] -= tokenReward;
                pendingTokenRewards[rewardToken] -= (tokenRewardAfterFee + fee);
                if (fee > 0) {
                    IERC20(rewardToken).safeTransfer(FEE_RECIPIENT, fee);
                }
                if (tokenRewardAfterFee > 0) {
                    IERC20(rewardToken).safeTransfer(msg.sender, tokenRewardAfterFee);
                }
                emit RewardsClaimed(address(token), msg.sender, rewardToken, tokenRewardAfterFee);
            }
        }

        stakeInfo.lastClaimTimestamp = block.timestamp;
    }

    function unstake() external nonReentrant {
        StakeInfo storage stakeInfo = stakes[msg.sender];
        require(stakeInfo.amount > 0, "No stake to withdraw");
        require(block.timestamp >= stakeInfo.stakeTimestamp, "Invalid timestamp");

        updateReward(msg.sender);

        uint256 amount = stakeInfo.amount;
        uint256 fee = (amount * FEE_PERCENT) / FEE_DENOMINATOR;
        uint256 penalty = 0;

        if (block.timestamp < stakeInfo.stakeTimestamp + PENALTY_DURATION) {
            penalty = (amount * PENALTY_INITIAL_PERCENT) / FEE_DENOMINATOR;
        } else if (block.timestamp < stakeInfo.stakeTimestamp + PENALTY_DECREASE_PERIOD) {
            uint256 daysSinceLockup = (block.timestamp - stakeInfo.stakeTimestamp) / 1 days;
            uint256 penaltyPercent = PENALTY_INITIAL_PERCENT - (daysSinceLockup * 100);
            if (penaltyPercent > 0) {
                penalty = (amount * penaltyPercent) / FEE_DENOMINATOR;
            }
        }

        uint256 amountAfterFees = amount - fee - penalty;

        totalStaked -= amount;
        stakeInfo.amount = 0;
        stakeInfo.stakeTimestamp = 0;

        uint256 index = stakerIndex[msg.sender];
        address lastStaker = stakers[stakers.length - 1];
        stakers[index] = lastStaker;
        stakerIndex[lastStaker] = index;
        stakers.pop();
        delete stakerIndex[msg.sender];

        token.safeTransfer(msg.sender, amountAfterFees);
        if (fee > 0) token.safeTransfer(FEE_RECIPIENT, fee);
        if (penalty > 0) token.safeTransfer(FEE_RECIPIENT, penalty);

        emit Unstaked(address(token), msg.sender, amountAfterFees);
    }

    receive() external payable {
        if (msg.value > 0) {
            totalEthRewards += msg.value;
            pendingEthRewards += msg.value;
            emit RewardsDistributed(address(token), address(0), msg.value);
        }
    }
}...// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "./StakingPool.sol";

contract StakingPoolFactory {
    // Event emitted when a new staking pool is created
    event StakingPoolCreated(address indexed poolAddress, address indexed token);
    // Event emitted when pool initialization fails
    event PoolInitializationFailed(address indexed token, bytes reason);

    // Mapping to track created pools by token address
    mapping(address => address) public pools;

    // Function to create a new staking pool
    function createPool(address token) external returns (address) {
        require(token != address(0), "Invalid token address");
        require(pools[token] == address(0), "Pool already exists for this token");

        // Deploy a new StakingPool contract with factory and token addresses
        try new StakingPool(address(this), token) returns (StakingPool newPool) {
            // Store the pool address in the mapping
            pools[token] = address(newPool);

            // Emit success event
            emit StakingPoolCreated(address(newPool), token);

            return address(newPool);
        } catch (bytes memory reason) {
            // Emit failure event with revert reason
            emit PoolInitializationFailed(token, reason);
            revert("Pool creation failed");
        }
    }

    // Function to get the pool address for a given token
    function getPool(address token) external view returns (address) {
        return pools[token];
    }
} 
