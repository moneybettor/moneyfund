// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "./StakingPool.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

/**
 * @title StakingPoolFactory
 * @notice Deploys StakingPool instances for arbitrary ERC-20 tokens.
 * @dev Same interface; pool logic is now pull-based so no token registration is needed.
 */
contract StakingPoolFactory {
    /* ───────────────────────────── events ───────────────────── */
    event StakingPoolCreated(
        address indexed poolAddress,
        address indexed token,
        uint256 hardLockDuration,
        uint256 initialPenaltyPercent,
        uint256 penaltyDecayPercentPerDay
    );
    event PoolInitializationFailed(address indexed token, string reason);

    /* ───────────────────────────── errors ───────────────────── */
    error InvalidToken();
    error PoolExists();
    error ParamOutOfRange();
    error DecayTooFast();
    error NotERC20();

    /* ─────────────────────────── storage ───────────────────── */
    mapping(address => address) public pools; // staking-token → pool

    function createPool(
        address token,
        uint256 hardLockDuration,
        uint256 initialPenaltyPercent,
        uint256 penaltyDecayPercentPerDay
    ) external returns (address poolAddr) {
        if (token == address(0)) revert InvalidToken();
        if (pools[token] != address(0)) revert PoolExists();
        if (hardLockDuration == 0) revert ParamOutOfRange();
        if (
            initialPenaltyPercent == 0 ||
            initialPenaltyPercent > 10_000 ||
            penaltyDecayPercentPerDay == 0
        ) revert ParamOutOfRange();
        if (initialPenaltyPercent / penaltyDecayPercentPerDay > 365)
            revert DecayTooFast();

        // Light ERC-20 sanity check
        try IERC20(token).balanceOf(address(0)) {} catch {
            revert NotERC20();
        }

        try
            new StakingPool(
                address(this),
                token,
                hardLockDuration,
                initialPenaltyPercent,
                penaltyDecayPercentPerDay
            )
        returns (StakingPool newPool) {
            poolAddr     = address(newPool);
            pools[token] = poolAddr;

            emit StakingPoolCreated(
                poolAddr,
                token,
                hardLockDuration,
                initialPenaltyPercent,
                penaltyDecayPercentPerDay
            );
        } catch Error(string memory reason) {
            emit PoolInitializationFailed(token, reason);
            revert("Pool creation failed");
        } catch {
            emit PoolInitializationFailed(token, "Unknown error");
            revert("Pool creation failed");
        }
    }

    function getPool(address token) external view returns (address) {
        return pools[token];
    }
}
...// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

/**
 * @title StakingPool
 * @notice ERC-20 staking with ETH / any-token pull-based rewards (no
 *         explicit registration).  Fixes reward-snapshot dilution.
 */
contract StakingPool is Ownable, ReentrancyGuard {
    using SafeERC20 for IERC20;

    uint256 public constant FEE_PERCENT     = 50;
    uint256 public constant FEE_DENOMINATOR = 10_000;
    uint256 public constant MIN_STAKE       = 1;

    uint256 public immutable HARD_LOCK_DURATION;
    uint256 public immutable INITIAL_PENALTY_PERCENT;
    uint256 public immutable PENALTY_DECAY_PERCENT_PER_DAY;
    address public immutable factoryAddress;
    IERC20  public immutable token;

    address public feeRecipient;

    uint256 public totalStaked;
    uint256 private ethBalance;

    struct StakeInfo {
        uint256 amount;
        uint256 stakeTimestamp;
    }
    mapping(address => StakeInfo) public stakes;

    mapping(address => uint256) public rewardPerTokenStored;
    mapping(address => uint256) public tokenBalance;
    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;
    mapping(address => mapping(address => uint256)) public rewards;

    address[] public rewardTokens;
    mapping(address => bool) private _tokenSeen;

    event Staked(address indexed user, uint256 amt);
    event Unstaked(address indexed user, uint256 amt, uint256 penalty);
    event RewardsClaimed(address indexed user, address rewardTok, uint256 amt);
    event FeeRecipientUpdated(address indexed oldRecip, address indexed newRecip);

    error InvalidAmount();
    error InvalidToken();
    error NoStake();
    error Locked();
    error InsufficientBalance();

    constructor(
        address _factory,
        address _token,
        uint256 _hardLockDuration,
        uint256 _initialPenaltyPercent,
        uint256 _penaltyDecayPercentPerDay
    ) Ownable(_factory) {
        require(_factory != address(0), "Invalid factory");
        require(_token   != address(0), "Invalid token");

        factoryAddress                = _factory;
        token                         = IERC20(_token);
        HARD_LOCK_DURATION            = _hardLockDuration;
        INITIAL_PENALTY_PERCENT       = _initialPenaltyPercent;
        PENALTY_DECAY_PERCENT_PER_DAY = _penaltyDecayPercentPerDay;

        feeRecipient = 0x9759883ea07e2cA1E2d32E97f42d254841616AB5;
    }

    function updateFeeRecipient(address newRecipient) external onlyOwner {
        if (newRecipient == address(0)) revert InvalidToken();
        emit FeeRecipientUpdated(feeRecipient, newRecipient);
        feeRecipient = newRecipient;
    }

    function stake(uint256 amount) external nonReentrant {
        if (amount == 0) revert InvalidAmount();
        address user = msg.sender;

        _updateReward(user, address(0));
        _updateReward(user, address(token));
        for (uint256 i = 0; i < rewardTokens.length; ++i) {
            _updateReward(user, rewardTokens[i]);
        }

        StakeInfo storage s = stakes[user];
        s.amount        += amount;
        s.stakeTimestamp = block.timestamp;
        totalStaked     += amount;

        token.safeTransferFrom(user, address(this), amount);
        emit Staked(user, amount);
    }

    function claimReward(address rewardToken) public nonReentrant {
        address user = msg.sender;
        if (stakes[user].amount == 0) revert NoStake();

        _sync(rewardToken); // ✅ ADDED: ensures new reward is pulled in
        _updateReward(user, rewardToken);

        uint256 reward = rewards[user][rewardToken];
        if (reward == 0) return;

        rewards[user][rewardToken] = 0;
        uint256 fee = (reward * FEE_PERCENT) / FEE_DENOMINATOR;
        uint256 pay = reward - fee;

        if (rewardToken == address(0)) {
            if (reward > ethBalance) revert InsufficientBalance();
            ethBalance -= reward;
            if (fee > 0) payable(feeRecipient).transfer(fee);
            if (pay > 0) payable(user).transfer(pay);
        } else {
            if (reward > tokenBalance[rewardToken]) revert InsufficientBalance();
            tokenBalance[rewardToken] -= reward;
            if (fee > 0) IERC20(rewardToken).safeTransfer(feeRecipient, fee);
            if (pay > 0) IERC20(rewardToken).safeTransfer(user, pay);
        }

        emit RewardsClaimed(user, rewardToken, pay);
    }

    function claimRewards(address[] calldata rewardTokens_) external {
        for (uint256 i = 0; i < rewardTokens_.length; ++i) {
            claimReward(rewardTokens_[i]);
        }
    }

    function unstake() external nonReentrant {
        address user = msg.sender;
        StakeInfo storage s = stakes[user];
        if (s.amount == 0) revert NoStake();
        if (block.timestamp < s.stakeTimestamp + HARD_LOCK_DURATION) revert Locked();

        _updateReward(user, address(0));
        _updateReward(user, address(token));
        for (uint256 i = 0; i < rewardTokens.length; ++i) {
            _updateReward(user, rewardTokens[i]);
        }

        uint256 amount  = s.amount;
        uint256 fee     = (amount * FEE_PERCENT) / FEE_DENOMINATOR;

        uint256 elapsed    = block.timestamp - s.stakeTimestamp;
        uint256 penaltyBps = INITIAL_PENALTY_PERCENT;
        if (elapsed >= HARD_LOCK_DURATION) {
            uint256 decay = ((elapsed - HARD_LOCK_DURATION) * PENALTY_DECAY_PERCENT_PER_DAY) / 1 days;
            penaltyBps = decay >= INITIAL_PENALTY_PERCENT ? 0 : INITIAL_PENALTY_PERCENT - decay;
        }

        uint256 penalty  = penaltyBps == 0 ? 0 : (amount * penaltyBps) / FEE_DENOMINATOR;
        uint256 sendBack = amount - fee - penalty;

        totalStaked -= amount;
        s.amount     = 0;

        token.safeTransfer(user, sendBack);
        if (fee     > 0) token.safeTransfer(feeRecipient, fee);
        if (penalty > 0) token.safeTransfer(feeRecipient, penalty);

        emit Unstaked(user, sendBack, penalty);
    }

    function _sync(address rewardToken) internal {
        uint256 bal;
        if (rewardToken == address(0)) {
            bal = address(this).balance;
        } else if (rewardToken == address(token)) {
            bal = IERC20(rewardToken).balanceOf(address(this)) - totalStaked;
        } else {
            bal = IERC20(rewardToken).balanceOf(address(this));
        }

        uint256 accounted = rewardToken == address(0) ? ethBalance : tokenBalance[rewardToken];

        if (bal > accounted && totalStaked > 0) {
            uint256 delta = bal - accounted;
            rewardPerTokenStored[rewardToken] += (delta * 1e36) / totalStaked;

            if (rewardToken == address(0)) {
                ethBalance = bal;
            } else {
                tokenBalance[rewardToken] = bal;
            }

            if (
                rewardToken != address(0) &&
                rewardToken != address(token) &&
                !_tokenSeen[rewardToken]
            ) {
                _tokenSeen[rewardToken] = true;
                rewardTokens.push(rewardToken);
            }
        }
    }

    function _updateReward(address user, address rewardToken) internal {
        _sync(rewardToken);

        uint256 rpt = rewardPerTokenStored[rewardToken];
        uint256 paid = userRewardPerTokenPaid[user][rewardToken];

        if (stakes[user].amount > 0) {
            rewards[user][rewardToken] +=
                (stakes[user].amount * (rpt - paid)) / 1e36;
        }
        userRewardPerTokenPaid[user][rewardToken] = rpt;
    }

    receive() external payable {}
}
