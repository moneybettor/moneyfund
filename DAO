<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=0.9">
  <title>MoneyFund DAO</title>
  <link href="https://fonts.googleapis.com/css2?family=Manrope:wght@400;500;600;700&display=swap" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/web3@1.7.4/dist/web3.min.js"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Manrope', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: linear-gradient(135deg, #0A0C1E, #1F2A44);
      color: #E5E7EB;
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
      padding: 17.94px; /* 15.6px * 1.15 */
      overflow-x: hidden;
      position: relative;
    }

    body::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: url('data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 80 80" opacity="0.03"%3E%3Cdefs%3E%3Cfilter id="noise"%3E%3CfeTurbulence type="fractalNoise" baseFrequency="0.7" numOctaves="4" stitchTiles="stitch"/%3E%3C/filter%3E%3C/defs%3E%3Crect width="100%" height="100%" filter="url(%23noise)"/%3E%3C/svg%3E');
      z-index: -1;
    }

    .container {
      width: 100%;
      max-width: 1000px;
      text-align: center;
    }

    h1 {
      color: #FFFFFF;
      margin-bottom: 17.94px; /* 15.6px * 1.15 */
      font-size: 1.794rem; /* 1.56rem * 1.15 */
      font-weight: 700;
      text-align: center;
      text-shadow: 0 1.495px 2.99px rgba(0, 0, 0, 0.2); /* 1.3px, 2.6px * 1.15 */
    }

    h2 {
      color: #FFFFFF;
      margin-bottom: 11.96px; /* 10.4px * 1.15 */
      font-size: 1.12125rem; /* 0.975rem * 1.15 */
      font-weight: 600;
    }

    .section {
      margin: 14.95px 0; /* 13px * 1.15 */
      padding: 17.94px; /* 15.6px * 1.15 */
      background: rgba(31, 41, 55, 0.6);
      backdrop-filter: blur(11.96px); /* 10.4px * 1.15 */
      border: 1px solid rgba(99, 102, 241, 0.2);
      border-radius: 11.96px; /* 10.4px * 1.15 */
      box-shadow: 0 4.485px 14.95px rgba(0, 0, 0, 0.2); /* 3.9px, 13px * 1.15 */
    }

    select, input, button {
      width: 100%;
      max-width: 1000px;
      padding: 8.97px; /* 7.8px * 1.15 */
      margin-bottom: 11.96px; /* 10.4px * 1.15 */
      border: 1px solid rgba(99, 102, 241, 0.2);
      border-radius: 7.475px; /* 6.5px * 1.15 */
      background: rgba(17, 24, 39, 0.9);
      color: #E5E7EB;
      font-size: 0.7475rem; /* 0.65rem * 1.15 */
      text-align: center;
      transition: border 0.3s, box-shadow 0.3s, background 0.3s;
      box-shadow: inset 0 1.495px 4.485px rgba(0, 0, 0, 0.15); /* 1.3px, 3.9px * 1.15 */
    }

    select:hover, input:hover {
      background: rgba(17, 24, 39, 0.95);
      border-color: rgba(99, 102, 241, 0.4);
      box-shadow: 0 0 5.98px rgba(99, 102, 241, 0.3); /* 5.2px * 1.15 */
    }

    select:focus, input:focus {
      border-color: #6366F1;
      box-shadow: 0 0 7.475px rgba(99, 102, 241, 0.5); /* 6.5px * 1.15 */
      outline: none;
    }

    input::placeholder {
      color: #9CA3AF;
      opacity: 0.8;
    }

    button {
      padding: 10.465px; /* 9.1px * 1.15 */
      border: none;
      cursor: pointer;
      font-size: 0.82165rem; /* 0.715rem * 1.15 */
      font-weight: 600;
      background: linear-gradient(90deg, #4F46E5, #A855F7);
      color: #F9FAFB;
      transition: background 0.3s, transform 0.2s, box-shadow 0.3s;
      position: relative;
      overflow: hidden;
    }

    button:hover {
      background: linear-gradient(90deg, #4338CA, #9333EA);
      transform: scale(1.03);
      box-shadow: 0 4.485px 11.96px rgba(99, 102, 241, 0.4); /* 3.9px, 10.4px * 1.15 */
    }

    button:disabled {
      background: rgba(75, 85, 99, 0.6);
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }

    .spinner {
      display: none;
      width: 35.88px; /* 31.2px * 1.15 */
      height: 35.88px; /* 31.2px * 1.15 */
      border: 2.99px solid rgba(99, 102, 241, 0.2); /* 2.6px * 1.15 */
      border-top: 2.99px solid #6366F1; /* 2.6px * 1.15 */
      border-radius: 50%;
      animation: spin 0.8s linear infinite;
      margin: 8.97px auto; /* 7.8px * 1.15 */
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .table-container {
      max-width: 100%;
      max-height: 224.25px; /* 195px * 1.15 */
      overflow-y: auto;
      overflow-x: auto;
      background: rgba(31, 41, 55, 0.6);
      border-radius: 11.96px; /* 10.4px * 1.15 */
      border: 1px solid rgba(99, 102, 241, 0.2);
    }

    #proposalsTable {
      width: 100%;
      min-width: 800px;
      border-collapse: collapse;
      margin-top: 8.97px; /* 7.8px * 1.15 */
      font-size: 0.67275rem; /* 0.585rem * 1.15 */
      table-layout: fixed;
      background: rgba(17, 24, 39, 0.9);
      border-radius: 8.97px; /* 7.8px * 1.15 */
    }

    #proposalsTable th,
    #proposalsTable td {
      border: 1px solid rgba(99, 102, 241, 0.15);
      padding: 5.98px; /* 5.2px * 1.15 */
      text-align: center;
      word-break: break-word;
      color: #E5E7EB;
    }

    #proposalsTable th {
      background: rgba(31, 41, 55, 0.8);
      font-weight: 600;
      font-size: 0.67275rem; /* 0.585rem * 1.15 */
    }

    #proposalsTable td.address {
      max-width: 67.275px; /* 58.5px * 1.15 */
    }

    #proposalsTable .vote-buttons button {
      margin: 1.495px; /* 1.3px * 1.15 */
      padding: 4.485px 7.475px; /* 3.9px, 6.5px * 1.15 */
      font-size: 0.598rem; /* 0.52rem * 1.15 */
      background: linear-gradient(90deg, #4F46E5, #A855F7);
      border-radius: 5.98px; /* 5.2px * 1.15 */
    }

    #proposalsTable .vote-buttons button:hover {
      background: linear-gradient(90deg, #4338CA, #9333EA);
    }

    #proposalsTable th:nth-child(1), #proposalsTable td:nth-child(1) { width: 5%; }
    #proposalsTable th:nth-child(2), #proposalsTable td:nth-child(2) { width: 15%; }
    #proposalsTable th:nth-child(3), #proposalsTable td:nth-child(3) { width: 15%; }
    #proposalsTable th:nth-child(4), #proposalsTable td:nth-child(4) { width: 10%; }
    #proposalsTable th:nth-child(5), #proposalsTable td:nth-child(5) { width: 10%; }
    #proposalsTable th:nth-child(6), #proposalsTable td:nth-child(6) { width: 10%; }
    #proposalsTable th:nth-child(7), #proposalsTable td:nth-child(7) { width: 10%; }
    #proposalsTable th:nth-child(8), #proposalsTable td:nth-child(8) { width: 10%; }
    #proposalsTable th:nth-child(9), #proposalsTable td:nth-child(9) { width: 7%; }
    #proposalsTable th:nth-child(10), #proposalsTable td:nth-child(10) { width: 8%; }

    #membersList {
      max-height: 149.5px; /* 130px * 1.15 */
      overflow-y: auto;
      padding: 8.97px; /* 7.8px * 1.15 */
      background: rgba(17, 24, 39, 0.9);
      border-radius: 8.97px; /* 7.8px * 1.15 */
      border: 1px solid rgba(99, 102, 241, 0.15);
    }

    #membersList p {
      color: #E5E7EB;
      margin: 2.99px 0; /* 2.6px * 1.15 */
      font-size: 0.67275rem; /* 0.585rem * 1.15 */
    }

    p {
      color: #D1D5DB;
      margin: 5.98px 0; /* 5.2px * 1.15 */
      font-size: 0.67275rem; /* 0.585rem * 1.15 */
    }

    .member-status {
      color: #D1D5DB;
      margin: 5.98px 0; /* 5.2px * 1.15 */
      font-size: 0.67275rem; /* 0.585rem * 1.15 */
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 4.485px; /* 3.9px * 1.15 */
    }

    .status-dot {
      display: inline-block;
      width: 6px;
      height: 6px;
      border-radius: 50%;
    }

    .red-dot {
      background: #EF4444;
    }

    .green-dot {
      background: #10B981;
    }
  </style>
</head>

<body>
  <div class="container">
    <h1>MoneyFund DAO</h1>
    <select id="walletSelector" onchange="daoInterface.selectWallet(this.value)">
      <option value="">-- Select Wallet --</option>
    </select>
    <button id="joinDaoBtn" onclick="daoInterface.joinDAO()">Join DAO</button>

    <div class="section">
      <h2>DAO Info</h2>
      <p>ETH Balance: <span id="ethBalance">0</span> ETH</p>
      <p>MONEY Balance: <span id="tokenBalanceDisplay">0</span> MONEY</p>
      <h2>Members</h2>
      <p id="memberStatus" class="member-status"><span class="status-dot red-dot"></span> Member Status: Not Connected</p>
      <div id="membersList"></div>
    </div>

    <div class="section">
      <h2>Proposals</h2>
      <select id="proposalType" onchange="daoInterface.updateProposalInputs()">
        <option value="0">Withdraw ETH</option>
        <option value="1">Withdraw Token</option>
        <option value="2">Add Member</option>
        <option value="3">Remove Member</option>
        <option value="4">Swap ETH for Tokens</option>
        <option value="5">Swap Tokens for ETH</option>
      </select>
      <input type="text" id="proposalTarget" placeholder="Target Address">
      <input type="number" id="proposalAmount" placeholder="Amount" min="0" step="1">
      <input type="number" id="proposalAmountOutMin" placeholder="Min Output (Swaps Only)" min="0" step="1" style="display: none;">
      <button id="createProposalBtn" onclick="daoInterface.createProposal()">Create Proposal</button>
      <div class="table-container">
        <table id="proposalsTable">
          <thead>
            <tr>
              <th>ID</th>
              <th>Type</th>
              <th>Address</th>
              <th>Amount</th>
              <th>Min Out</th>
              <th>Yes Weight</th>
              <th>No Weight</th>
              <th>End Time</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="proposalsBody"></tbody>
        </table>
      </div>
    </div>

    <div id="spinner" class="spinner"></div>
  </div>

  <script>
    let selectedWallet = null;

    function logMessage(message) {
      console.log(`[${new Date().toLocaleTimeString()}] ${message}`);
    }

    function showSpinner() {
      document.getElementById('spinner').style.display = 'block';
    }

    function hideSpinner() {
      document.getElementById('spinner').style.display = 'none';
    }

    class DAOInterface {
      constructor() {
        this.web3 = new Web3("https://mainnet.infura.io/v3/cf2916fb6dbc47ae824d6f36db817b73");
        this.contractAddress = "0x8cf5e3797aabb62698f9c4a3f0234667fd981754";
        this.abi = [
          {
            "inputs": [
              {"internalType":"uint256[]","name":"proposalIds","type":"uint256[]"},
              {"internalType":"bool[]","name":"voteChoices","type":"bool[]"}
            ],
            "name": "batchVote",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {"internalType":"enum DAOMultisig.ProposalType","name":"proposalType","type":"uint8"},
              {"internalType":"address","name":"target","type":"address"},
              {"internalType":"uint256","name":"amount","type":"uint256"},
              {"internalType":"uint256","name":"amountOutMin","type":"uint256"}
            ],
            "name": "createProposal",
            "outputs": [{"internalType":"uint256","name":"","type":"uint256"}],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "inputs": [{"internalType":"address","name":"owner","type":"address"}],
            "name": "OwnableInvalidOwner",
            "type": "error"
          },
          {
            "inputs": [{"internalType":"address","name":"account","type":"address"}],
            "name": "OwnableUnauthorizedAccount",
            "type": "error"
          },
          {
            "anonymous": false,
            "inputs": [
              {"indexed":true,"internalType":"address","name":"sender","type":"address"},
              {"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}
            ],
            "name": "DepositedETH",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {"indexed":true,"internalType":"address","name":"sender","type":"address"},
              {"indexed":true,"internalType":"address","name":"token","type":"address"},
              {"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}
            ],
            "name": "DepositedToken",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {"indexed":false,"internalType":"bool","name":"stopped","type":"bool"}
            ],
            "name": "EmergencyStopTriggered",
            "type": "event"
          },
          {
            "inputs": [{"internalType":"uint256","name":"proposalId","type":"uint256"}],
            "name": "executeProposal",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "joinDAO",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "anonymous": false,
            "inputs": [
              {"indexed":true,"internalType":"address","name":"member","type":"address"}
            ],
            "name": "MemberAdded",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {"indexed":true,"internalType":"address","name":"member","type":"address"}
            ],
            "name": "MemberRemoved",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},
              {"indexed":true,"internalType":"address","name":"newOwner","type":"address"}
            ],
            "name": "OwnershipTransferred",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {"indexed":true,"internalType":"uint256","name":"proposalId","type":"uint256"},
              {"indexed":true,"internalType":"address","name":"proposer","type":"address"},
              {"indexed":false,"internalType":"enum DAOMultisig.ProposalType","name":"proposalType","type":"uint8"},
              {"indexed":false,"internalType":"address","name":"target","type":"address"},
              {"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},
              {"indexed":false,"internalType":"uint256","name":"amountOutMin","type":"uint256"}
            ],
            "name": "ProposalCreated",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {"indexed":true,"internalType":"uint256","name":"proposalId","type":"uint256"},
              {"indexed":false,"internalType":"enum DAOMultisig.ProposalType","name":"proposalType","type":"uint8"},
              {"indexed":false,"internalType":"address","name":"target","type":"address"},
              {"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},
              {"indexed":false,"internalType":"bool","name":"passed","type":"bool"}
            ],
            "name": "ProposalExecuted",
            "type": "event"
          },
          {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [{"internalType":"address","name":"newOwner","type":"address"}],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [{"internalType":"bool","name":"stop","type":"bool"}],
            "name": "triggerEmergencyStop",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {"internalType":"uint256","name":"proposalId","type":"uint256"},
              {"internalType":"bool","name":"support","type":"bool"}
            ],
            "name": "vote",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "anonymous": false,
            "inputs": [
              {"indexed":true,"internalType":"uint256","name":"proposalId","type":"uint256"},
              {"indexed":true,"internalType":"address","name":"voter","type":"address"},
              {"indexed":false,"internalType":"bool","name":"vote","type":"bool"},
              {"indexed":false,"internalType":"uint256","name":"weight","type":"uint256"}
            ],
            "name": "Voted",
            "type": "event"
          },
          {
            "stateMutability": "payable",
            "type": "receive"
          },
          {
            "inputs": [],
            "name": "emergencyStop",
            "outputs": [{"internalType":"bool","name":"","type":"bool"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "getETHBalance",
            "outputs": [{"internalType":"uint256","name":"","type":"uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "getMembers",
            "outputs": [{"internalType":"address[]","name":"","type":"address[]"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {"internalType":"uint256","name":"amountIn","type":"uint256"},
              {"internalType":"address[]","name":"path","type":"address[]"}
            ],
            "name": "getSwapAmountOutMin",
            "outputs": [{"internalType":"uint256[]","name":"","type":"uint256[]"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [{"internalType":"address","name":"tokenAddress","type":"address"}],
            "name": "getTokenBalance",
            "outputs": [{"internalType":"uint256","name":"","type":"uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "MAX_PROPOSALS_PER_DAY",
            "outputs": [{"internalType":"uint256","name":"","type":"uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "memberCount",
            "outputs": [{"internalType":"uint256","name":"","type":"uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [{"internalType":"uint256","name":"","type":"uint256"}],
            "name": "memberList",
            "outputs": [{"internalType":"address","name":"","type":"address"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [{"internalType":"address","name":"","type":"address"}],
            "name": "members",
            "outputs": [{"internalType":"bool","name":"","type":"bool"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "MINIMUM_TOKEN_BALANCE",
            "outputs": [{"internalType":"uint256","name":"","type":"uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "ONE_DAY",
            "outputs": [{"internalType":"uint256","name":"","type":"uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "owner",
            "outputs": [{"internalType":"address","name":"","type":"address"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "proposalCount",
            "outputs": [{"internalType":"uint256","name":"","type":"uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [{"internalType":"uint256","name":"","type":"uint256"}],
            "name": "proposals",
            "outputs": [
              {"internalType":"uint256","name":"id","type":"uint256"},
              {"internalType":"address","name":"proposer","type":"address"},
              {"internalType":"enum DAOMultisig.ProposalType","name":"proposalType","type":"uint8"},
              {"internalType":"address","name":"target","type":"address"},
              {"internalType":"uint256","name":"amount","type":"uint256"},
              {"internalType":"uint256","name":"yesWeight","type":"uint256"},
              {"internalType":"uint256","name":"noWeight","type":"uint256"},
              {"internalType":"uint256","name":"endTime","type":"uint256"},
              {"internalType":"uint256","name":"amountOutMin","type":"uint256"},
              {"internalType":"bool","name":"executed","type":"bool"}
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [{"internalType":"uint256","name":"","type":"uint256"}],
            "name": "proposalsPerDay",
            "outputs": [{"internalType":"uint256","name":"","type":"uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "token",
            "outputs": [{"internalType":"contract IERC20","name":"","type":"address"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "TOKEN_ADDRESS",
            "outputs": [{"internalType":"address","name":"","type":"address"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "TOTAL_TOKEN_SUPPLY",
            "outputs": [{"internalType":"uint256","name":"","type":"uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "UNISWAP_ROUTER_ADDRESS",
            "outputs": [{"internalType":"address","name":"","type":"address"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "uniswapRouter",
            "outputs": [{"internalType":"contract IUniswapV2Router","name":"","type":"address"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "VOTING_PERIOD",
            "outputs": [{"internalType":"uint256","name":"","type":"uint256"}],
            "stateMutability": "view",
            "type": "function"
          }
        ];
        this.contract = new this.web3.eth.Contract(this.abi, this.contractAddress);
        this.tokenAddress = "0x100DB67F41A2dF3c32cC7c0955694b98339B7311";
        this.tokenAbi = [
          {
            "inputs": [
              {"internalType":"address","name":"spender","type":"address"},
              {"internalType":"uint256","name":"amount","type":"uint256"}
            ],
            "name": "approve",
            "outputs": [{"internalType":"bool","name":"","type":"bool"}],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [{"internalType":"address","name":"account","type":"address"}],
            "name": "balanceOf",
            "outputs": [{"internalType":"uint256","name":"","type":"uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [{"internalType":"uint8","name":"","type":"uint8"}],
            "stateMutability": "view",
            "type": "function"
          }
        ];
        this.tokenContract = new this.web3.eth.Contract(this.tokenAbi, this.tokenAddress);
        this.wallets = [];
        this.gasLimit = 500000;
        this.proposalTypes = ["Withdraw ETH", "Withdraw Token", "Add Member", "Remove Member", "Swap ETH for ERC20", "Swap ERC20 for ETH"];
      }

      async init() {
        try {
          this.loadWalletsFromStorage();
          const networkId = await this.web3.eth.net.getId();
          logMessage(`Connected to network ID: ${networkId} (1 = Mainnet)`);
          await this.checkTokenDecimals();
          await this.refreshBalances();
          await this.refreshMembers();
          await this.refreshProposals();
          this.updateProposalInputs();
          if (selectedWallet) {
            await this.checkMemberStatus();
          }
        } catch (error) {
          logMessage(`Initialization error: ${error.message}`);
        }
      }

      async checkTokenDecimals() {
        try {
          const decimals = await this.tokenContract.methods.decimals().call();
          logMessage(`Token at ${this.tokenAddress} has ${decimals} decimals`);
        } catch (error) {
          logMessage(`Error fetching token decimals: ${error.message}`);
        }
      }

      loadWalletsFromStorage() {
        try {
          this.wallets = JSON.parse(localStorage.getItem('wallets') || '[]');
          const selector = document.getElementById('walletSelector');
          selector.innerHTML = '<option value="">-- Select Wallet --</option>';
          this.wallets.forEach((wallet, index) => {
            const option = document.createElement('option');
            option.value = index;
            option.textContent = `${wallet.address.slice(0, 6)}...${wallet.address.slice(-4)} (${wallet.type})`;
            selector.appendChild(option);
          });
          if (this.wallets.length > 0) {
            selectedWallet = this.wallets[0];
            selector.value = 0;
          }
        } catch (error) {
          logMessage(`Error loading wallets: ${error.message}`);
        }
      }

      async selectWallet(index) {
        try {
          const idx = parseInt(index);
          if (idx >= 0 && idx < this.wallets.length) {
            selectedWallet = this.wallets[idx];
            await this.checkMemberStatus();
            await this.refreshMembers();
            await this.refreshProposals();
          } else {
            selectedWallet = null;
            document.getElementById('memberStatus').innerHTML = '<span class="status-dot red-dot"></span> Member Status: Not Connected';
          }
        } catch (error) {
          logMessage(`Error selecting wallet: ${error.message}`);
        }
      }

      async checkMemberStatus() {
        try {
          if (!selectedWallet) {
            document.getElementById('memberStatus').innerHTML = '<span class="status-dot red-dot"></span> Member Status: Not Connected';
            return;
          }
          const isMember = await this.contract.methods.members(selectedWallet.address).call({ from: selectedWallet.address });
          document.getElementById('memberStatus').innerHTML = `<span class="status-dot ${isMember ? 'green-dot' : 'red-dot'}"></span> Member Status: ${isMember ? 'Yes' : 'No'}`;
          document.getElementById('joinDaoBtn').style.display = isMember ? 'none' : 'block';
        } catch (error) {
          logMessage(`Error checking member status: ${error.message}`);
          document.getElementById('memberStatus').innerHTML = '<span class="status-dot red-dot"></span> Member Status: Error';
        }
      }

      async refreshBalances() {
        try {
          if (!selectedWallet) {
            logMessage("Please select a wallet to refresh balances");
            return;
          }
          const ethBalance = await this.contract.methods.getETHBalance().call({ from: selectedWallet.address });
          const tokenBalance = await this.contract.methods.getTokenBalance(this.tokenAddress).call({ from: selectedWallet.address });
          document.getElementById('ethBalance').textContent = this.web3.utils.fromWei(ethBalance, "ether");
          document.getElementById('tokenBalanceDisplay').textContent = this.web3.utils.fromWei(tokenBalance, "ether");
        } catch (error) {
          logMessage(`Error refreshing balances: ${error.message}`);
        }
      }

      async refreshMembers() {
        try {
          if (!selectedWallet) {
            logMessage("Please select a wallet to refresh members");
            return;
          }
          const members = await this.contract.methods.getMembers().call({ from: selectedWallet.address });
          const membersList = document.getElementById('membersList');
          membersList.innerHTML = members.map(member => `<p>${member}</p>`).join('');
        } catch (error) {
          logMessage(`Error refreshing members: ${error.message}`);
        }
      }

      async refreshProposals() {
        try {
          const proposalsBody = document.getElementById('proposalsBody');
          proposalsBody.innerHTML = `<tr><td colspan="10">Loading...</td></tr>`;

          if (!selectedWallet) {
            proposalsBody.innerHTML = `<tr><td colspan="10">Select wallet to view proposals</td></tr>`;
            return;
          }

          const fromAddr = selectedWallet.address;
          const proposalCount = await this.contract.methods.proposalCount().call({ from: fromAddr });
          const proposalCountNum = Number(proposalCount);

          if (proposalCountNum === 0) {
            proposalsBody.innerHTML = `<tr><td colspan="10">No proposals found.</td></tr>`;
            return;
          }

          const now = Math.floor(Date.now() / 1000);
          const proposalPromises = [];
          for (let i = 1; i <= proposalCountNum; i++) {
            proposalPromises.push(
              this.contract.methods.proposals(i).call({ from: fromAddr })
                .catch(err => {
                  logMessage(`Failed to fetch proposal ${i}: ${err.message}`);
                  return null;
                })
            );
          }

          const proposals = await Promise.all(proposalPromises);
          proposalsBody.innerHTML = '';

          const validProposals = proposals.filter(p => p && p.id && Number(p.id) > 0);

          if (validProposals.length === 0) {
            proposalsBody.innerHTML = `<tr><td colspan="10">No valid proposals loaded.</td></tr>`;
            return;
          }

          validProposals.forEach((proposal) => {
            const proposalId = Number(proposal.id);
            const row = document.createElement('tr');
            const endTime = parseInt(proposal.endTime);
            const canVote = !proposal.executed && now <= endTime;
            const canExecute = !proposal.executed && now > endTime;
            const decimals = this.tokenDecimals || 18;

            const yesWeightFormatted = parseFloat(this.web3.utils.fromWei(proposal.yesWeight || '0', decimals === 18 ? 'ether' : 'mwei')).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 4 });
            const noWeightFormatted = parseFloat(this.web3.utils.fromWei(proposal.noWeight || '0', decimals === 18 ? 'ether' : 'mwei')).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 4 });

            const amountFormatted = parseFloat(this.web3.utils.fromWei(proposal.amount || '0', "ether")).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 4 });
            const amountOutMinFormatted = parseFloat(this.web3.utils.fromWei(proposal.amountOutMin || '0', "ether")).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 4 });

            const typeText = this.proposalTypes[Number(proposal.proposalType)] || `Unknown (${proposal.proposalType})`;
            let statusText = proposal.executed ? 'Executed' : (now > endTime ? 'Ended' : 'Active');

            const endDate = new Date(endTime * 1000);
            const displayEndDate = endDate.toLocaleDateString() + ' ' + endDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

            row.innerHTML = `
              <td>${proposalId}</td>
              <td title="${typeText}">${typeText}</td>
              <td class="address" title="${proposal.target}">${proposal.target.slice(0,6)}...${proposal.target.slice(-4)}</td>
              <td>${amountFormatted}</td>
              <td>${amountOutMinFormatted}</td>
              <td>${yesWeightFormatted}</td>
              <td>${noWeightFormatted}</td>
              <td title="${endDate.toLocaleString()}">${displayEndDate}</td>
              <td>${statusText}</td>
              <td>
                <div class="vote-buttons">
                  ${canVote ? `<button onclick="daoInterface.vote(${proposalId}, true)" title="Vote Yes">Yes</button>` : ''}
                  ${canVote ? `<button onclick="daoInterface.vote(${proposalId}, false)" title="Vote No">No</button>` : ''}
                  ${canExecute ? `<button onclick="daoInterface.executeProposal(${proposalId})" title="Execute Proposal">Execute</button>` : ''}
                  ${!canVote && !canExecute && !proposal.executed ? 'Ended' : ''}
                  ${proposal.executed ? '-' : ''}
                </div>
              </td>`;
            proposalsBody.appendChild(row);
          });
        } catch (error) {
          logMessage(`Error refreshing proposals: ${error.message}`);
          document.getElementById('proposalsBody').innerHTML = `<tr><td colspan="10">Error loading proposals</td></tr>`;
        }
      }

      updateProposalInputs() {
        try {
          const proposalType = document.getElementById('proposalType').value;
          const targetInput = document.getElementById('proposalTarget');
          const amountInput = document.getElementById('proposalAmount');
          const amountOutMinInput = document.getElementById('proposalAmountOutMin');

          if (proposalType == "0") { // Withdraw ETH
            targetInput.placeholder = "Recipient Address";
            amountInput.placeholder = "Amount (ETH)";
            amountInput.style.display = 'block';
            amountOutMinInput.style.display = 'none';
          } else if (proposalType == "1") { // Withdraw Token
            targetInput.placeholder = "Token Address";
            amountInput.placeholder = "Amount (Tokens)";
            amountInput.style.display = 'block';
            amountOutMinInput.style.display = 'none';
          } else if (proposalType == "2") { // Add Member
            targetInput.placeholder = "Member Address to Add";
            amountInput.style.display = 'none';
            amountOutMinInput.style.display = 'none';
          } else if (proposalType == "3") { // Remove Member
            targetInput.placeholder = "Member Address to Remove";
            amountInput.style.display = 'none';
            amountOutMinInput.style.display = 'none';
          } else if (proposalType == "4") { // Swap ETH for ERC20
            targetInput.placeholder = "ERC20 Token Address to Receive";
            amountInput.placeholder = "ETH Amount to Swap";
            amountInput.style.display = 'block';
            amountOutMinInput.placeholder = "Min Tokens Out";
            amountOutMinInput.style.display = 'block';
          } else if (proposalType == "5") { // Swap ERC20 for ETH
            targetInput.placeholder = "ERC20 Token Address to Swap";
            amountInput.placeholder = "Token Amount to Swap";
            amountInput.style.display = 'block';
            amountOutMinInput.placeholder = "Min ETH Out";
            amountOutMinInput.style.display = 'block';
          }
        } catch (error) {
          logMessage(`Error updating proposal inputs: ${error.message}`);
        }
      }

      async joinDAO() {
        try {
          if (!selectedWallet || selectedWallet.isMetaMask) {
            logMessage("DAO Multisig requires a wallet with a private key.");
            return;
          }
          showSpinner();
          document.getElementById("joinDaoBtn").disabled = true;
          const tx = {
            from: selectedWallet.address,
            to: this.contractAddress,
            data: this.contract.methods.joinDAO().encodeABI(),
            gas: this.gasLimit,
            gasPrice: await this.web3.eth.getGasPrice()
          };
          const signedTx = await this.web3.eth.accounts.signTransaction(tx, selectedWallet.privateKey);
          const txHash = await this.sendTransaction(signedTx);
          logMessage(`Join DAO transaction sent: ${txHash}`);
          await this.checkMemberStatus();
          await this.refreshMembers();
        } catch (error) {
          logMessage(`Error joining DAO: ${error.message}`);
        } finally {
          hideSpinner();
          document.getElementById("joinDaoBtn").disabled = false;
        }
      }

      async createProposal() {
        try {
          if (!selectedWallet || selectedWallet.isMetaMask) {
            logMessage("DAO Multisig requires a wallet with a private key.");
            return;
          }
          const proposalType = document.getElementById("proposalType").value;
          const target = document.getElementById("proposalTarget").value;
          const amount = document.getElementById("proposalAmount").value;
          const amountOutMin = document.getElementById("proposalAmountOutMin").value || "0";

          if (!this.web3.utils.isAddress(target)) {
            logMessage("Enter a valid target address!");
            return;
          }

          let amountWei = "0";
          let amountOutMinWei = this.web3.utils.toWei(amountOutMin, "ether");
          if (proposalType == "0" || proposalType == "1" || proposalType == "4" || proposalType == "5") {
            if (!amount || amount <= 0) {
              logMessage("Enter a valid amount!");
              return;
            }
            amountWei = this.web3.utils.toWei(amount, "ether");
          }
          if (proposalType == "4" || proposalType == "5") {
            if (!amountOutMin || amountOutMin <= 0) {
              logMessage("Enter a valid minimum output for swaps!");
              return;
            }
          }

          showSpinner();
          document.getElementById("createProposalBtn").disabled = true;
          const tx = {
            from: selectedWallet.address,
            to: this.contractAddress,
            data: this.contract.methods.createProposal(proposalType, target, amountWei, amountOutMinWei).encodeABI(),
            gas: this.gasLimit,
            gasPrice: await this.web3.eth.getGasPrice()
          };
          const signedTx = await this.web3.eth.accounts.signTransaction(tx, selectedWallet.privateKey);
          const txHash = await this.sendTransaction(signedTx);
          logMessage(`Create proposal transaction sent: ${txHash}`);
          await this.refreshProposals();
        } catch (error) {
          logMessage(`Error creating proposal: ${error.message}`);
        } finally {
          hideSpinner();
          document.getElementById("createProposalBtn").disabled = false;
        }
      }

      async vote(proposalId, support) {
        try {
          if (!selectedWallet || selectedWallet.isMetaMask) {
            logMessage("DAO Multisig requires a wallet with a private key.");
            return;
          }
          showSpinner();
          const tx = {
            from: selectedWallet.address,
            to: this.contractAddress,
            data: this.contract.methods.vote(proposalId, support).encodeABI(),
            gas: this.gasLimit,
            gasPrice: await this.web3.eth.getGasPrice()
          };
          const signedTx = await this.web3.eth.accounts.signTransaction(tx, selectedWallet.privateKey);
          const txHash = await this.sendTransaction(signedTx);
          logMessage(`Vote transaction sent: ${txHash}`);
          await this.refreshProposals();
        } catch (error) {
          logMessage(`Error voting: ${error.message}`);
        } finally {
          hideSpinner();
        }
      }

      async executeProposal(proposalId) {
        try {
          if (!selectedWallet || selectedWallet.isMetaMask) {
            logMessage("DAO Multisig requires a wallet with a private key.");
            return;
          }
          showSpinner();
          const tx = {
            from: selectedWallet.address,
            to: this.contractAddress,
            data: this.contract.methods.executeProposal(proposalId).encodeABI(),
            gas: this.gasLimit,
            gasPrice: await this.web3.eth.getGasPrice()
          };
          const signedTx = await this.web3.eth.accounts.signTransaction(tx, selectedWallet.privateKey);
          const txHash = await this.sendTransaction(signedTx);
          logMessage(`Execute proposal transaction sent: ${txHash}`);
          await this.refreshProposals();
          await this.refreshBalances();
          await this.refreshMembers();
        } catch (error) {
          logMessage(`Error executing proposal: ${error.message}`);
        } finally {
          hideSpinner();
        }
      }

      async sendTransaction(signedTx) {
        return new Promise((resolve, reject) => {
          this.web3.eth.sendSignedTransaction(signedTx.rawTransaction)
            .on('transactionHash', resolve)
            .on('error', reject);
        });
      }
    }

    const daoInterface = new DAOInterface();
    daoInterface.init();
  </script>
</body>
</html>
