<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>MoneyFund Stablecoin Interface</title>
  <script src="https://cdn.jsdelivr.net/npm/web3@1.6.0/dist/web3.min.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Manrope:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Manrope', sans-serif;
      color: #E5E7EB;
      margin: 0;
      padding: 20px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      min-height: 100vh;
      position: relative;
      overflow-x: hidden;
      background: linear-gradient(135deg, #0A0C1E, #1F2A44);
    }

    .interface-wrapper {
      width: 100%;
      max-width: 600px;
      display: flex;
      flex-direction: column;
      align-items: center;
      margin: 0 auto;
    }

    .container {
      background: rgba(17, 24, 39, 0.95);
      padding: 30px;
      border-radius: 12px;
      backdrop-filter: blur(8px);
      -webkit-backdrop-filter: blur(8px);
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
      border: 1px solid rgba(99, 102, 241, 0.2);
      width: 100%;
      max-width: 600px;
      z-index: 1;
      margin-top: 10px;
    }

    h1 {
      text-align: center;
      color: #FFFFFF;
      margin-bottom: 20px;
      font-size: 24px;
      font-weight: 600;
    }

    label {
      display: block;
      margin: 10px 0 5px;
      font-weight: 500;
      color: #A5F3FC;
    }

    select, input {
      width: 100%;
      padding: 10px;
      margin-bottom: 15px;
      border: 1px solid rgba(99, 102, 241, 0.2);
      border-radius: 6px;
      font-size: 16px;
      color: #E5E7EB;
      background: rgba(17, 24, 39, 0.9);
      transition: border-color 0.3s ease, background 0.3s ease;
    }

    select:hover, input:hover {
      background: rgba(17, 24, 39, 0.8);
      border-color: rgba(99, 102, 241, 0.4);
    }

    input::placeholder {
      color: #9CA3AF;
      opacity: 0.7;
    }

    button {
      width: 100%;
      padding: 12px;
      margin: 10px 0;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 16px;
      font-weight: 600;
      transition: background 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
      background: linear-gradient(90deg, #4F46E5, #A855F7);
      color: #F9FAFB;
    }

    button:hover {
      background: linear-gradient(90deg, #4338CA, #9333EA);
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
    }

    #status {
      margin-top: 20px;
      font-weight: 500;
      text-align: center;
      color: #E5E7EB;
    }

    #log {
      margin-top: 20px;
      max-height: 200px;
      overflow-y: auto;
      border: 1px solid rgba(99, 102, 241, 0.2);
      padding: 10px;
      font-size: 14px;
      background: rgba(17, 24, 39, 0.95);
      color: #E5E7EB;
      border-radius: 6px;
      backdrop-filter: blur(8px);
      -webkit-backdrop-filter: blur(8px);
    }

    #balances {
      margin: 0 auto 20px;
      padding: 10px;
      border: 1px solid rgba(99, 102, 241, 0.2);
      border-radius: 6px;
      background: rgba(17, 24, 39, 0.95);
      color: #E5E7EB;
      width: fit-content;
      text-align: center;
    }

    #balances p {
      margin: 5px 0;
      font-size: 14px;
    }
  </style>
</head>
<body>
  <div class="interface-wrapper">
    <div class="container">
      <h1>MoneyFund Stablecoin</h1>
      <div id="balances">
        <p>My USDM Balance: <span id="dollarBalance">0</span></p>
        <p>1 USDM Price: $<span id="dollarPrice">1.0000</span></p>
      </div>
      <label for="walletSelector">Select Wallet:</label>
      <select id="walletSelector" onchange="dollarInterface.selectWallet(this.value)">
        <option value="">-- Select Wallet --</option>
      </select>
      <label for="mintAmount">Mint USDM Amount:</label>
      <input type="number" id="mintAmount" placeholder="e.g., 10" step="0.01" min="0">
      <button id="mintDollarBtn">Mint USDM</button>
      <label for="burnAmount">Burn USDM Amount:</label>
      <input type="number" id="burnAmount" placeholder="e.g., 10" step="0.01" min="0">
      <button id="burnDollarBtn">Burn USDM</button>
      <div id="status">Status: Not started</div>
      <div id="log"></div>
    </div>
  </div>

  <script>
    let selectedWallet = null;

    function logMessage(message) {
      const logDiv = document.getElementById('log');
      const entry = document.createElement('p');
      entry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
      logDiv.appendChild(entry);
      logDiv.scrollTop = logDiv.scrollHeight;
    }

    function updateStatus(message) {
      document.getElementById('status').textContent = `Status: ${message}`;
    }

    class DollarInterface {
      constructor() {
        this.web3 = new Web3("https://mainnet.infura.io/v3/cf2916fb6dbc47ae824d6f36db817b73");
        this.contractAddress = "0x33d5be7c0584f77b3168b1d38e1a6215af242d4f";
        this.contractABI = [
          {
            "inputs": [
              {"internalType": "address", "name": "spender", "type": "address"},
              {"internalType": "uint256", "name": "value", "type": "uint256"}
            ],
            "name": "approve",
            "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {"internalType": "uint256", "name": "etfAmount", "type": "uint256"}
            ],
            "name": "burn",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "inputs": [
              {"internalType": "address", "name": "spender", "type": "address"},
              {"internalType": "uint256", "name": "allowance", "type": "uint256"},
              {"internalType": "uint256", "name": "needed", "type": "uint256"}
            ],
            "name": "ERC20InsufficientAllowance",
            "type": "error"
          },
          {
            "inputs": [
              {"internalType": "address", "name": "sender", "type": "address"},
              {"internalType": "uint256", "name": "balance", "type": "uint256"},
              {"internalType": "uint256", "name": "needed", "type": "uint256"}
            ],
            "name": "ERC20InsufficientBalance",
            "type": "error"
          },
          {
            "inputs": [
              {"internalType": "address", "name": "approver", "type": "address"}
            ],
            "name": "ERC20InvalidApprover",
            "type": "error"
          },
          {
            "inputs": [
              {"internalType": "address", "name": "receiver", "type": "address"}
            ],
            "name": "ERC20InvalidReceiver",
            "type": "error"
          },
          {
            "inputs": [
              {"internalType": "address", "name": "sender", "type": "address"}
            ],
            "name": "ERC20InvalidSender",
            "type": "error"
          },
          {
            "inputs": [
              {"internalType": "address", "name": "spender", "type": "address"}
            ],
            "name": "ERC20InvalidSpender",
            "type": "error"
          },
          {
            "inputs": [
              {"internalType": "uint256", "name": "etfAmount", "type": "uint256"}
            ],
            "name": "mintWithEth",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [
              {"internalType": "address", "name": "owner", "type": "address"}
            ],
            "name": "OwnableInvalidOwner",
            "type": "error"
          },
          {
            "inputs": [
              {"internalType": "address", "name": "account", "type": "address"}
            ],
            "name": "OwnableUnauthorizedAccount",
            "type": "error"
          },
          {
            "inputs": [],
            "name": "ReentrancyGuardReentrantCall",
            "type": "error"
          },
          {
            "anonymous": false,
            "inputs": [
              {"indexed": true, "internalType": "address", "name": "owner", "type": "address"},
              {"indexed": true, "internalType": "address", "name": "spender", "type": "address"},
              {"indexed": false, "internalType": "uint256", "name": "value", "type": "uint256"}
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {"indexed": true, "internalType": "address", "name": "user", "type": "address"},
              {"indexed": false, "internalType": "uint256", "name": "etfAmount", "type": "uint256"},
              {"indexed": false, "internalType": "uint256", "name": "ethReceived", "type": "uint256"}
            ],
            "name": "Burned",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {"indexed": true, "internalType": "address", "name": "receiver", "type": "address"},
              {"indexed": false, "internalType": "uint256", "name": "tokenAmount", "type": "uint256"}
            ],
            "name": "FeeCollected",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {"indexed": true, "internalType": "address", "name": "user", "type": "address"},
              {"indexed": false, "internalType": "uint256", "name": "etfAmount", "type": "uint256"}
            ],
            "name": "Minted",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {"indexed": true, "internalType": "address", "name": "previousOwner", "type": "address"},
              {"indexed": true, "internalType": "address", "name": "newOwner", "type": "address"}
            ],
            "name": "OwnershipTransferred",
            "type": "event"
          },
          {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "anonymous": false,
            "inputs": [
              {"indexed": true, "internalType": "address", "name": "token", "type": "address"},
              {"indexed": false, "internalType": "uint256", "name": "tokenAmount", "type": "uint256"},
              {"indexed": false, "internalType": "uint256", "name": "minEthOut", "type": "uint256"},
              {"indexed": false, "internalType": "bool", "name": "success", "type": "bool"},
              {"indexed": false, "internalType": "string", "name": "reason", "type": "string"}
            ],
            "name": "SwapAttempt",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {"indexed": true, "internalType": "address", "name": "token", "type": "address"},
              {"indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256"}
            ],
            "name": "TokenBurned",
            "type": "event"
          },
          {
            "inputs": [
              {"internalType": "address", "name": "to", "type": "address"},
              {"internalType": "uint256", "name": "value", "type": "uint256"}
            ],
            "name": "transfer",
            "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "anonymous": false,
            "inputs": [
              {"indexed": true, "internalType": "address", "name": "from", "type": "address"},
              {"indexed": true, "internalType": "address", "name": "to", "type": "address"},
              {"indexed": false, "internalType": "uint256", "name": "value", "type": "uint256"}
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [
              {"internalType": "address", "name": "from", "type": "address"},
              {"internalType": "address", "name": "to", "type": "address"},
              {"internalType": "uint256", "name": "value", "type": "uint256"}
            ],
            "name": "transferFrom",
            "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {"internalType": "address", "name": "newOwner", "type": "address"}
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "stateMutability": "payable",
            "type": "receive"
          },
          {
            "inputs": [
              {"internalType": "address", "name": "owner", "type": "address"},
              {"internalType": "address", "name": "spender", "type": "address"}
            ],
            "name": "allowance",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {"internalType": "address", "name": "account", "type": "address"}
            ],
            "name": "balanceOf",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {"internalType": "uint256", "name": "", "type": "uint256"}
            ],
            "name": "basket",
            "outputs": [
              {"internalType": "address", "name": "tokenAddress", "type": "address"},
              {"internalType": "uint256", "name": "weight", "type": "uint256"}
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {"internalType": "address", "name": "token", "type": "address"},
              {"internalType": "uint256", "name": "tokenAmount", "type": "uint256"}
            ],
            "name": "calculateMinEthOut",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {"internalType": "address", "name": "token", "type": "address"},
              {"internalType": "uint256", "name": "ethAmount", "type": "uint256"}
            ],
            "name": "calculateMinTokenOut",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "DEAD_ADDRESS",
            "outputs": [{"internalType": "address", "name": "", "type": "address"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [{"internalType": "uint8", "name": "", "type": "uint8"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "ETH_BUFFER",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "FEE_BASIS_POINTS",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "feeReceiver",
            "outputs": [{"internalType": "address", "name": "", "type": "address"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "feeReceiver2",
            "outputs": [{"internalType": "address", "name": "", "type": "address"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "getEthBalance",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "getEthPrice",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {"internalType": "bool", "name": "returnPrice", "type": "bool"}
            ],
            "name": "getPriceOrGain",
            "outputs": [{"internalType": "int256", "name": "", "type": "int256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "getWeiPerEtf",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [{"internalType": "string", "name": "", "type": "string"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "owner",
            "outputs": [{"internalType": "address", "name": "", "type": "address"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "PRICE_FEED_DECIMALS",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "priceFeed",
            "outputs": [{"internalType": "contract AggregatorV3Interface", "name": "", "type": "address"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "SLIPPAGE_PROTECTION",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "SWAP_DEADLINE",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "symbol",
            "outputs": [{"internalType": "string", "name": "", "type": "string"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "TOKENX",
            "outputs": [{"internalType": "address", "name": "", "type": "address"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "TOTAL_BASIS_POINTS",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "uniswapRouter",
            "outputs": [{"internalType": "contract IUniswapV2Router02", "name": "", "type": "address"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "WEI_PER_ETH",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "weth",
            "outputs": [{"internalType": "address", "name": "", "type": "address"}],
            "stateMutability": "view",
            "type": "function"
          }
        ];
        this.contract = new this.web3.eth.Contract(this.contractABI, this.contractAddress);
        this.wallets = [];
        this.defaultGasLimit = 1500000;
        this.ETH_BUFFER = 1005;
        this.basketAssets = [
          { name: 'USD Coin', ticker: 'USDC', weight: 3333 },
          { name: 'Tether', ticker: 'USDT', weight: 3333 },
          { name: 'Dai', ticker: 'DAI', weight: 3334 }
        ];
      }

      init() {
        this.loadWalletsFromStorage();
        this.attachEventListeners();
        this.updateBalances();
      }

      attachEventListeners() {
        document.getElementById('mintDollarBtn').addEventListener('click', () => this.mintDollar());
        document.getElementById('burnDollarBtn').addEventListener('click', () => this.burnDollar());
        document.getElementById('mintAmount').addEventListener('input', () => this.updateMintInfo());
      }

      loadWalletsFromStorage() {
        this.wallets = JSON.parse(localStorage.getItem('wallets') || '[]');
        const selector = document.getElementById('walletSelector');
        selector.innerHTML = '<option value="">-- Select Wallet --</option>';
        this.wallets.forEach((wallet, index) => {
          const option = document.createElement('option');
          option.value = index;
          option.textContent = `${wallet.address.slice(0, 6)}...${wallet.address.slice(-4)}`;
          selector.appendChild(option);
        });
        logMessage(`Loaded ${this.wallets.length} wallets from localStorage.`);

        if (this.wallets.length > 0) {
          selectedWallet = this.wallets[0];
          document.getElementById('walletSelector').value = 0;
          logMessage(`Automatically selected wallet: ${selectedWallet.address}`);
          this.updateBalances();
        }
      }

      selectWallet(index) {
        const idx = parseInt(index);
        if (idx >= 0 && idx < this.wallets.length) {
          selectedWallet = this.wallets[idx];
          logMessage(`Selected wallet: ${selectedWallet.address}`);
          this.updateBalances();
        } else {
          selectedWallet = null;
          logMessage("No wallet selected.");
          document.getElementById('dollarBalance').textContent = '0';
          document.getElementById('dollarPrice').textContent = '1.0000';
        }
      }

      async waitForReceipt(txHash) {
        let receipt = null;
        let attempts = 0;
        const maxAttempts = 30;
        while (!receipt && attempts < maxAttempts) {
          try {
            receipt = await this.web3.eth.getTransactionReceipt(txHash);
            if (!receipt) {
              await new Promise(resolve => setTimeout(resolve, 10000));
              attempts++;
            }
          } catch (error) {
            logMessage(`Error fetching receipt for ${txHash}: ${error.message}`);
            return null;
          }
        }
        if (!receipt) {
          logMessage(`No receipt found for ${txHash} after ${maxAttempts} attempts.`);
        }
        return receipt;
      }

      async updateBalances() {
        if (!selectedWallet) {
          logMessage("No wallet selected for updating balances.");
          document.getElementById('dollarBalance').textContent = '0';
          document.getElementById('dollarPrice').textContent = '1.0000';
          return;
        }
        try {
          const dollarBalance = this.web3.utils.fromWei(
            await this.contract.methods.balanceOf(selectedWallet.address).call(),
            'ether'
          );
          document.getElementById('dollarBalance').textContent = parseFloat(dollarBalance).toFixed(4);
          logMessage(`USDM Balance: ${dollarBalance}`);

          const priceWei = await this.contract.methods.getPriceOrGain(true).call();
          const priceUsd = this.web3.utils.fromWei(priceWei.toString(), 'ether');
          document.getElementById('dollarPrice').textContent = parseFloat(priceUsd).toFixed(4);
          logMessage(`USDM Price: $${priceUsd}`);
        } catch (error) {
          logMessage(`Error updating balances: ${error.message}`);
          document.getElementById('dollarBalance').textContent = '0';
          document.getElementById('dollarPrice').textContent = '1.0000';
        }
      }

      async updateMintInfo() {
        const dollarAmount = document.getElementById('mintAmount').value;
        if (dollarAmount > 0) {
          try {
            const dollarAmountWei = this.web3.utils.toWei(dollarAmount.toString(), 'ether');
            const weiPerUsdm = await this.contract.methods.getWeiPerEtf().call();

            const ethRequired = this.web3.utils.toBN(weiPerUsdm)
              .mul(this.web3.utils.toBN(dollarAmountWei))
              .div(this.web3.utils.toBN('1000000000000000000'));
            const ethRequiredWithBuffer = ethRequired
              .mul(this.web3.utils.toBN(this.ETH_BUFFER))
              .div(this.web3.utils.toBN(1000));

            const feeAmount = this.web3.utils.toBN(dollarAmountWei)
              .mul(this.web3.utils.toBN(10))
              .div(this.web3.utils.toBN(10000));
            const totalFeeAmount = feeAmount.mul(this.web3.utils.toBN(2));
            const feeAmountEth = this.web3.utils.fromWei(totalFeeAmount, 'ether');

            logMessage(
              `To mint ${dollarAmount} USDM: ~${this.web3.utils.fromWei(ethRequiredWithBuffer, 'ether')} ETH needed (swapped to USDC, USDT, DAI). Fees: ${feeAmountEth} USDM (0.1% to each receiver).`
            );
          } catch (error) {
            logMessage(`Error in updateMintInfo: ${error.message}`);
          }
        }
      }

      async mintDollar() {
        if (!selectedWallet) {
          logMessage("Please select a wallet.");
          updateStatus("Please select a wallet.");
          return;
        }
        const dollarAmount = document.getElementById('mintAmount').value;
        if (!dollarAmount || dollarAmount <= 0) {
          logMessage("Please enter a valid USDM amount.");
          updateStatus("Please enter a valid USDM amount.");
          return;
        }
        const dollarAmountWei = this.web3.utils.toWei(dollarAmount.toString(), 'ether');
        try {
          updateStatus("Preparing to mint USDM...");

          const walletBalance = await this.web3.eth.getBalance(selectedWallet.address);
          const walletBalanceEth = this.web3.utils.fromWei(walletBalance, 'ether');
          logMessage(`Wallet ETH balance: ${walletBalanceEth}`);

          const weiPerUsdm = await this.contract.methods.getWeiPerEtf().call();
          const ethRequired = this.web3.utils.toBN(weiPerUsdm)
            .mul(this.web3.utils.toBN(dollarAmountWei))
            .div(this.web3.utils.toBN('1000000000000000000'));
          const ethRequiredWithBuffer = ethRequired
            .mul(this.web3.utils.toBN(this.ETH_BUFFER))
            .div(this.web3.utils.toBN(1000));

          let gasLimit = this.defaultGasLimit;
          try {
            gasLimit = await this.contract.methods.mintWithEth(dollarAmountWei).estimateGas({
              from: selectedWallet.address,
              value: ethRequiredWithBuffer.toString()
            });
            gasLimit = Math.floor(gasLimit * 1.2);
            logMessage(`Estimated gas limit: ${gasLimit}`);
          } catch (error) {
            logMessage(`Gas estimation failed, using default ${gasLimit}: ${error.message}`);
          }

          const gasPrice = await this.web3.eth.getGasPrice();
          logMessage(`Gas price: ${this.web3.utils.fromWei(gasPrice, 'gwei')} Gwei`);

          const gasCost = this.web3.utils.toBN(gasPrice).mul(this.web3.utils.toBN(gasLimit));
          const totalCost = ethRequiredWithBuffer.add(gasCost);

          if (this.web3.utils.toBN(walletBalance).lt(totalCost)) {
            throw new Error(
              `Insufficient ETH: need ${this.web3.utils.fromWei(totalCost, 'ether')} ETH (value + gas), have ${walletBalanceEth} ETH`
            );
          }

          updateStatus("Minting USDM...");
          const tx = {
            from: selectedWallet.address,
            to: this.contractAddress,
            data: this.contract.methods.mintWithEth(dollarAmountWei).encodeABI(),
            value: ethRequiredWithBuffer.toString(),
            gas: gasLimit,
            gasPrice
          };

          if (!selectedWallet.privateKey || !selectedWallet.privateKey.startsWith('0x') || selectedWallet.privateKey.length !== 66) {
            throw new Error("Invalid private key format");
          }

          const signedTx = await this.web3.eth.accounts.signTransaction(tx, selectedWallet.privateKey);
          const txHash = await new Promise((resolve, reject) => {
            this.web3.eth.sendSignedTransaction(signedTx.rawTransaction)
              .on('transactionHash', hash => {
                logMessage(`Mint transaction hash: ${hash}`);
                resolve(hash);
              })
              .on('error', error => {
                logMessage(`Error sending mint transaction: ${error.message}`);
                reject(error);
              });
          });

          logMessage(`Mint transaction sent for ${dollarAmount} USDM: ${txHash}`);
          const receipt = await this.waitForReceipt(txHash);
          if (receipt && receipt.status) {
            logMessage(`Minted ${dollarAmount} USDM successfully.`);
            updateStatus(`Minted ${dollarAmount} USDM successfully.`);
            await this.updateBalances();
          } else {
            logMessage("Mint transaction reverted.");
            updateStatus("Mint transaction reverted.");
          }
        } catch (error) {
          logMessage(`Mint failed: ${error.message}`);
          updateStatus(`Mint failed: ${error.message}`);
        }
      }

      async burnDollar() {
        if (!selectedWallet) {
          logMessage("Please select a wallet.");
          updateStatus("Please select a wallet.");
          return;
        }
        const dollarAmount = document.getElementById('burnAmount').value;
        if (!dollarAmount || dollarAmount <= 0) {
          logMessage("Please enter a valid USDM amount.");
          updateStatus("Please enter a valid USDM amount.");
          return;
        }
        const dollarAmountWei = this.web3.utils.toWei(dollarAmount.toString(), 'ether');
        try {
          updateStatus("Burning USDM...");

          const dollarBalance = await this.contract.methods.balanceOf(selectedWallet.address).call();
          if (this.web3.utils.toBN(dollarBalance).lt(this.web3.utils.toBN(dollarAmountWei))) {
            throw new Error(
              `Insufficient USDM balance: need ${dollarAmount} USDM, have ${this.web3.utils.fromWei(dollarBalance, 'ether')} USDM`
            );
          }

          const feeAmount = this.web3.utils.toBN(dollarAmountWei)
            .mul(this.web3.utils.toBN(10))
            .div(this.web3.utils.toBN(10000));
          const totalFeeAmount = feeAmount.mul(this.web3.utils.toBN(2));
          const usdmToBurn = this.web3.utils.toBN(dollarAmountWei).sub(totalFeeAmount);

          const weiPerUsdm = await this.contract.methods.getWeiPerEtf().call();
          const expectedEthOut = this.web3.utils.toBN(weiPerUsdm)
            .mul(this.web3.utils.toBN(usdmToBurn))
            .div(this.web3.utils.toBN('1000000000000000000'));

          logMessage(
            `Burning ${dollarAmount} USDM to receive ~${this.web3.utils.fromWei(expectedEthOut, 'ether')} ETH (after ${this.web3.utils.fromWei(totalFeeAmount, 'ether')} USDM fees).`
          );

          let gasLimit = this.defaultGasLimit;
          try {
            gasLimit = await this.contract.methods.burn(dollarAmountWei).estimateGas({
              from: selectedWallet.address
            });
            gasLimit = Math.floor(gasLimit * 1.2);
            logMessage(`Estimated gas limit: ${gasLimit}`);
          } catch (error) {
            logMessage(`Gas estimation failed, using default ${gasLimit}: ${error.message}`);
          }

          const gasPrice = await this.web3.eth.getGasPrice();
          logMessage(`Gas price: ${this.web3.utils.fromWei(gasPrice, 'gwei')} Gwei`);

          const tx = {
            from: selectedWallet.address,
            to: this.contractAddress,
            data: this.contract.methods.burn(dollarAmountWei).encodeABI(),
            gas: gasLimit,
            gasPrice
          };

          const signedTx = await this.web3.eth.accounts.signTransaction(tx, selectedWallet.privateKey);
          const txHash = await new Promise((resolve, reject) => {
            this.web3.eth.sendSignedTransaction(signedTx.rawTransaction)
              .on('transactionHash', hash => {
                logMessage(`Burn transaction hash: ${hash}`);
                resolve(hash);
              })
              .on('error', error => {
                logMessage(`Error sending burn transaction: ${error.message}`);
                reject(error);
              });
          });

          logMessage(`Burn transaction sent for ${dollarAmount} USDM: ${txHash}`);
          const receipt = await this.waitForReceipt(txHash);
          if (receipt && receipt.status) {
            logMessage(`Burned ${dollarAmount} USDM successfully.`);
            updateStatus(`Burned ${dollarAmount} USDM successfully.`);
            await this.updateBalances();
          } else {
            logMessage("Burn transaction reverted.");
            updateStatus("Burn transaction reverted.");
          }
        } catch (error) {
          logMessage(`Burn failed: ${error.message}`);
          updateStatus(`Burn failed: ${error.message}`);
        }
      }
    }

    const dollarInterface = new DollarInterface();
    dollarInterface.init();
  </script>
</body>
</html>
