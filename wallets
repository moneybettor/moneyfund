<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MoneyFund Wallets</title>
    <script src="https://cdn.jsdelivr.net/npm/web3@1.6.0/dist/web3.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Manrope:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            text-rendering: optimizeLegibility;
        }

        body {
            font-family: 'Manrope', sans-serif;
            background: linear-gradient(135deg, #0A0C1E, #1F2A44);
            color: #E5E7EB;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            padding: clamp(12px, 2vw, 24px);
            position: relative;
            overflow-x: hidden;
        }

        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 80 80" opacity="0.03"%3E%3Cdefs%3E%3Cfilter id="noise"%3E%3CfeTurbulence type="fractalNoise" baseFrequency="0.7" numOctaves="4" stitchTiles="stitch"/%3E%3C/filter%3E%3C/defs%3E%3Crect width="100%" height="100%" filter="url(%23noise)"/%3E%3C/svg%3E');
            z-index: -1;
        }

        .main-panel {
            background: rgba(17, 24, 39, 0.95);
            border-radius: 16px;
            padding: clamp(12px, 2vw, 24px);
            border: 1px solid rgba(99, 102, 241, 0.2);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
            max-width: 800px;
            width: 100%;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 24px;
            flex-wrap: wrap;
            gap: 12px;
        }

        h1 {
            color: #FFFFFF;
            font-size: clamp(1.5rem, 4vw, 1.8rem);
            font-weight: 700;
            line-height: 1.5;
        }

        h3 {
            color: #FFFFFF;
            font-size: clamp(1.1rem, 3vw, 1.3rem);
            font-weight: 600;
            margin-bottom: 16px;
            line-height: 1.5;
        }

        .tab-nav {
            display: flex;
            gap: 8px;
            margin-bottom: 20px;
            padding-bottom: 8px;
            border-bottom: 1px solid rgba(99, 102, 241, 0.2);
            overflow-x: auto;
            scrollbar-width: none;
        }

        .tab-nav::-webkit-scrollbar {
            display: none;
        }

        .tab {
            padding: 10px 16px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            color: #A5F3FC;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            min-width: 80px;
            line-height: 1.5;
        }

        .tab:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .tab.active {
            background: linear-gradient(90deg, #4F46E5, #A855F7);
            color: #F9FAFB;
        }

        .tab-content {
            display: none;
            padding: 16px;
            background: rgba(17, 24, 39, 0.9);
            border-radius: 12px;
            border: 1px solid rgba(99, 102, 241, 0.1);
        }

        .tab-content.active {
            display: block;
        }

        button, .button {
            width: 100%;
            padding: 12px;
            margin: 12px 0;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            background: linear-gradient(90deg, #4F46E5, #A855F7);
            color: #F9FAFB;
            transition: background 0.3s, transform 0.2s;
            line-height: 1.5;
            min-height: 44px;
            display: flex;
            justify-content: center;
            align-items: center;
            text-align: center;
        }

        button:hover, .button:hover {
            background: linear-gradient(90deg, #4338CA, #9333EA);
            transform: scale(1.02);
        }

        button:disabled {
            background: rgba(75, 85, 99, 0.6);
            cursor: not-allowed;
            transform: none;
        }

        .button-group-top {
            display: flex;
            gap: 12px;
            margin-bottom: 16px;
            flex-wrap: wrap;
        }

        .button-group-top button, .button-group-top .button {
            flex: 1;
            padding: 12px;
            font-size: 16px;
            min-height: 44px;
        }

        .input-group {
            margin-bottom: 16px;
        }

        .input-group label {
            display: block;
            color: #A5F3FC;
            font-size: 14px;
            font-weight: 500;
            margin-bottom: 4px;
            line-height: 1.5;
        }

        input, select {
            width: 100%;
            padding: 12px;
            border: 1px solid rgba(99, 102, 241, 0.2);
            border-radius: 8px;
            background: rgba(17, 24, 39, 0.9);
            color: #E5E7EB;
            font-size: 16px;
            font-weight: 400;
            line-height: 1.5;
            transition: border 0.3s, box-shadow 0.3s;
        }

        input:hover, select:hover {
            border-color: rgba(99, 102, 241, 0.4);
            box-shadow: 0 0 6px rgba(99, 102, 241, 0.3);
        }

        input:focus, select:focus {
            border-color: #6366F1;
            box-shadow: 0 0 8px rgba(99, 102, 241, 0.5);
            outline: none;
        }

        input::placeholder {
            color: #9CA3AF;
            font-weight: 400;
            opacity: 1;
        }

        select {
            appearance: none;
            background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23E5E7EB%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E');
            background-repeat: no-repeat;
            background-position: right 12px center;
            background-size: 10px;
            padding-right: 32px;
        }

        .balance-box {
            background: rgba(17, 24, 39, 0.9);
            border-radius: 8px;
            padding: 16px;
            margin: 16px 0;
            border: 1px solid rgba(99, 102, 241, 0.2);
        }

        .balance-box p {
            margin: 8px 0;
            font-size: 16px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            line-height: 1.5;
        }

        .balance-box p strong {
            color: #FFFFFF;
            font-weight: 500;
        }

        .balance-box p span {
            color: #A5F3FC;
            font-weight: 400;
        }

        .toggle-container {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .toggle-label {
            font-size: 14px;
            color: #F1F5F9;
            line-height: 1.5;
        }

        .toggle-switch {
            position: relative;
            width: 48px;
            height: 24px;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: #475569;
            transition: 0.3s;
            border-radius: 24px;
        }

        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 3px;
            bottom: 3px;
            background: #FFFFFF;
            transition: 0.3s;
            border-radius: 50%;
        }

        input:checked + .toggle-slider {
            background: #10B981;
        }

        input:checked + .toggle-slider:before {
            transform: translateX(24px);
        }

        #connectedWalletAddress {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 6px;
            margin: 12px 0;
            font-size: 14px;
            font-weight: 400;
            line-height: 1.5;
            flex-wrap: nowrap;
        }

        #copyAddressBtn {
            background: linear-gradient(90deg, #4F46E5, #A855F7);
            color: #F9FAFB;
            border: none;
            border-radius: 4px;
            padding: 5px 10px;
            font-size: 12px;
            font-weight: 500;
            cursor: pointer;
            transition: background 0.3s, transform 0.2s;
            line-height: 1.5;
            min-height: 24px;
            width: 50px;
        }

        #copyAddressBtn:hover {
            background: linear-gradient(90deg, #4338CA, #9333EA);
            transform: scale(1.02);
        }

        .menu-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
            gap: 12px;
            margin: 20px 0;
        }

        .menu-tile {
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));
            border-radius: 8px;
            padding: 16px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            height: 100px;
        }

        .menu-tile:hover {
            transform: scale(1.05);
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.1));
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
        }

        .menu-tile .icon {
            font-size: 24px;
            color: #6366F1;
            margin-bottom: 8px;
        }

        .menu-tile .title {
            font-size: 14px;
            font-weight: 600;
            color: #FFFFFF;
            line-height: 1.5;
        }

        .status-list {
            max-height: 300px;
            overflow-y: auto;
            padding-right: 8px;
        }

        .status-list::-webkit-scrollbar {
            width: 6px;
        }

        .status-list::-webkit-scrollbar-thumb {
            background: rgba(99, 102, 241, 0.4);
            border-radius: 3px;
        }

        .status-list li {
            position: relative;
            padding: 12px 16px;
            font-size: 14px;
            color: #F1F5F9;
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
            transition: background 0.3s ease;
            line-height: 1.5;
        }

        .status-list li::before {
            content: '';
            position: absolute;
            left: 0;
            top: 50%;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            transform: translateY(-50%);
        }

        .status-list li.pending::before { background: #F59E0B; }
        .status-list li.success::before { background: #10B981; }
        .status-list li.error::before { background: #F87171; }

        .status-list li:hover {
            background: rgba(255, 255, 255, 0.05);
        }

        .status-list li a {
            color: #6366F1;
            text-decoration: none;
        }

        .status-list li a:hover {
            text-decoration: underline;
        }

        .preview-window {
            width: 100%;
            height: clamp(300px, 50vh, 400px);
            border: 1px solid rgba(99, 102, 241, 0.2);
            border-radius: 8px;
            margin: 16px 0;
            background: rgba(17, 24, 39, 0.9);
        }

        #importWalletFile {
            display: none;
        }

        #log {
            margin-top: 20px;
            max-height: 200px;
            overflow-y: auto;
            border: 1px solid rgba(99, 102, 241, 0.2);
            padding: 10px;
            font-size: 14px;
            background: rgba(17, 24, 39, 0.9);
            color: #E5E7EB;
            border-radius: 8px;
        }

        #walletFunction {
            display: none;
            width: 100%;
            background: rgba(17, 24, 39, 0.9);
            color: #E5E7EB;
            border: 1px solid rgba(99, 102, 241, 0.2);
            border-radius: 8px;
            margin: 20px 0;
            padding: 10px;
            font-size: 16px;
            transition: border 0.3s, box-shadow 0.3s;
        }

        #walletFunction:hover {
            border-color: rgba(99, 102, 241, 0.4);
            box-shadow: 0 0 6px rgba(99, 102, 241, 0.3);
        }

        @media (max-width: 768px) {
            body {
                padding: 10px;
            }

            .main-panel {
                width: 100%;
                padding: 15px;
            }

            .header {
                flex-direction: column;
                align-items: flex-start;
            }

            .toggle-container {
                margin-top: 10px;
            }

            .tab-nav {
                display: none;
            }

            #walletFunction {
                display: block;
            }

            .button, .button-group-top button, .button-group-top .button {
                padding: 10px;
                font-size: clamp(14px, 4vw, 16px);
            }

            .button-group-top {
                display: flex;
                flex-direction: row;
                flex-wrap: nowrap;
                gap: 8px;
                margin-bottom: 12px;
            }

            .button-group-top button, .button-group-top .button {
                flex: 1;
                padding: 8px;
                font-size: 14px;
                min-height: 36px;
                white-space: nowrap;
            }

            .tab-content {
                padding: 10px;
            }

            .status-list {
                padding: 10px;
            }

            .balance-box {
                padding: 10px;
                margin: 10px 0;
            }

            .balance-box p {
                font-size: clamp(12px, 3.5vw, 14px);
            }

            #connectedWalletAddress {
                flex-wrap: nowrap;
                gap: 8px;
                font-size: clamp(8px, 2.5vw, 8.5px);
            }

            #connectedAddressText {
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
                max-width: 150px;
            }

            .menu-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 5px;
                display: none; /* Hidden on mobile, using dropdown instead */
            }

            .menu-tile {
                width: 48px;
                height: 48px;
                border-radius: 5px;
                padding: 5px;
            }

            .menu-tile .icon {
                font-size: clamp(10px, 2vw, 14px);
                margin-bottom: 6px;
            }

            .menu-tile .title {
                font-size: clamp(8px, 2vw, 10px);
            }

            .preview-window {
                height: 400px;
            }
        }

        @media (max-width: 480px) {
            h1, h3 {
                font-size: clamp(1.2rem, 5vw, 1.5rem);
            }

            input, select, button, .button {
                margin: 3px;
                padding: 8px;
                font-size: clamp(12px, 3.5vw, 14px);
            }

            .button-group-top {
                gap: 6px;
                margin-bottom: 10px;
            }

            .button-group-top button, .button-group-top .button {
                padding: 6px;
                font-size: 12px;
                min-height: 32px;
            }

            .status-list li {
                padding: 8px;
                font-size: clamp(0.8rem, 3.5vw, 1rem);
            }

            .preview-window {
                height: 350px;
            }

            #connectedAddressText {
                max-width: 120px;
            }
        }
    </style>
</head>
<body>
    <div class="main-panel">
        <div class="header">
            <h1>MoneyFund Wallets</h1>
            <div class="toggle-container">
                <span class="toggle-label">0x100 Mode</span>
                <label class="toggle-switch">
                    <input type="checkbox" id="vanityModeToggle" aria-label="Toggle 0x100 Mode">
                    <span class="toggle-slider"></span>
                </label>
            </div>
        </div>
        <div class="tab-nav">
            <div class="tab active" data-tab="home" aria-selected="true">Home</div>
            <div class="tab" data-tab="transactions" aria-selected="false">Send</div>
            <div class="tab" data-tab="swap" aria-selected="false">Swap</div>
            <div class="tab" data-tab="getMoney" aria-selected="false">Get $Money</div>
            <div class="tab" data-tab="myCoins" aria-selected="false">My Coins</div>
            <div class="tab" data-tab="volume" aria-selected="false">Volume</div>
            <div class="tab" data-tab="status" aria-selected="false">Status</div>
        </div>
        <select id="walletFunction" class="mobile-dropdown" onchange="walletInterface.handleWalletFunction(this.value)">
            <option value="">-- Main Menu --</option>
            <option value="home">🏠 Home</option>
            <option value="transactions">✈️ Send</option>
            <option value="swap">🔄 Swap</option>
            <option value="getMoney">💰 Get $Money</option>
            <option value="myCoins">📖 My Coins</option>
            <option value="volume">🤖 Volume</option>
            <option value="status">📋 Status</option>
            <option value="explorer">🔍 Explorer</option>
            <option value="fiatSwap">📎 Create Pair</option>
            <option value="getFund">🚀 Launch Fund</option>
            <option value="createCoin">🪙 Launch Coin</option>
            <option value="getEth">🌐 Get .eth</option>
            <option value="airdrop">🎁 Airdrop</option>
            <option value="launchStaking">🥩 Launch Staking</option>
            <option value="dividends">📈 Dividends</option>
            <option value="vote">📊 Vote</option>
            <option value="manageLiquidity">🃏 Blackjack</option>
            <option value="dm">✉️ DMs</option>
            <option value="chat">💬 Chat</option>
            <option value="import">📥 Import Wallets</option>
            <option value="export">📤 Export Wallets</option>
        </select>
        <div class="tab-content active" id="home">
            <div class="button-group-top">
                <button id="createMoneyFundBtn">Create New Wallet</button>
                <label for="importWalletFile" class="button">Import Wallets</label>
                <input type="file" id="importWalletFile" accept=".json" style="display: none;">
                <button id="exportWalletsBtn">Export Wallets</button>
            </div>
            <div class="input-group">
                <label for="walletSelector">Select Wallet</label>
                <select id="walletSelector" aria-label="Select Wallet">
                    <option value="">-- Select Wallet --</option>
                </select>
            </div>
            <div id="connectedWalletAddress" style="display: none;">
                <span id="connectedAddressText"></span>
                <button id="copyAddressBtn" aria-label="Copy Wallet Address">Copy</button>
            </div>
            <div class="balance-box">
                <p><strong>Money Balance:</strong> <span id="myMoney">0 MONEY</span></p>
                <p><strong>Ethereum Balance:</strong> <span id="balanceDisplay">0 ETH</span></p>
                <p><strong>USDM Balance:</strong> <span id="usdmBalance">0 USDM</span></p>
            </div>
            <p id="generationInfo"></p>
            <div class="menu-grid">
                <div class="menu-tile" onclick="walletInterface.handleWalletFunction('explorer')">
                    <span class="icon">🔍</span>
                    <div class="title">Explorer</div>
                </div>
                <div class="menu-tile" onclick="walletInterface.handleWalletFunction('fiatSwap')">
                    <span class="icon">📎</span>
                    <div class="title">Create Pair</div>
                </div>
                <div class="menu-tile" onclick="walletInterface.handleWalletFunction('getFund')">
                    <span class="icon">🚀</span>
                    <div class="title">Launch Fund</div>
                </div>
                <div class="menu-tile" onclick="walletInterface.handleWalletFunction('createCoin')">
                    <span class="icon">🪙</span>
                    <div class="title">Launch Coin</div>
                </div>
                <div class="menu-tile" onclick="walletInterface.handleWalletFunction('getEth')">
                    <span class="icon">🌐</span>
                    <div class="title">Get .eth</div>
                </div>
                <div class="menu-tile" onclick="walletInterface.handleWalletFunction('airdrop')">
                    <span class="icon">🎁</span>
                    <div class="title">Airdrop</div>
                </div>
                <div class="menu-tile" onclick="walletInterface.handleWalletFunction('launchStaking')">
                    <span class="icon">🥩</span>
                    <div class="title">Launch Staking</div>
                </div>
                <div class="menu-tile" onclick="walletInterface.handleWalletFunction('dividends')">
                    <span class="icon">📈</span>
                    <div class="title">Dividends</div>
                </div>
                <div class="menu-tile" onclick="walletInterface.handleWalletFunction('vote')">
                    <span class="icon">📊</span>
                    <div class="title">Vote</div>
                </div>
                <div class="menu-tile" onclick="walletInterface.handleWalletFunction('manageLiquidity')">
                    <span class="icon">🃏</span>
                    <div class="title">Blackjack</div>
                </div>
                <div class="menu-tile" onclick="walletInterface.handleWalletFunction('dm')">
                    <span class="icon">✉️</span>
                    <div class="title">DMs</div>
                </div>
                <div class="menu-tile" onclick="walletInterface.handleWalletFunction('chat')">
                    <span class="icon">💬</span>
                    <div class="title">Chat</div>
                </div>
            </div>
        </div>
        <div class="tab-content" id="transactions">
            <h3>Send ETH or Coins</h3>
            <div class="input-group">
                <label for="sendTypeSelect">Transfer Type</label>
                <select id="sendTypeSelect" aria-label="Transfer Type">
                    <option value="ETH">Send ETH</option>
                    <option value="Token">Send Coin</option>
                </select>
            </div>
            <div class="input-group">
                <label for="recipientAddress">Recipient Address or ENS</label>
                <input type="text" id="recipientAddress" placeholder="Enter address or ENS" aria-label="Recipient Address">
            </div>
            <div class="input-group">
                <label for="amount">Amount to Transfer</label>
                <input type="number" id="amount" placeholder="Enter amount" step="0.0001" aria-label="Amount to Transfer">
            </div>
            <div id="tokenDetails" style="display: none;">
                <div class="input-group">
                    <label for="tokenAddress">Token Address</label>
                    <input type="text" id="tokenAddress" placeholder="Enter token address" aria-label="Token Address">
                </div>
            </div>
            <div class="input-group">
                <label for="gasPriceOption">Gas Price Option</label>
                <select id="gasPriceOption" aria-label="Gas Price Option">
                    <option value="manual">Manual</option>
                    <option value="auto">Auto Estimate</option>
                </select>
            </div>
            <div id="gasPriceInput" style="display: none;">
                <div class="input-group">
                    <label for="gasPrice">Gas Price (Gwei)</label>
                    <input type="number" id="gasPrice" placeholder="Enter gas price" aria-label="Gas Price">
                </div>
            </div>
            <button id="transferFundsBtn">Transfer Funds</button>
            <div id="statusDisplay">Status: Ready</div>
        </div>
        <div class="tab-content" id="swap">
            <h3>Swap Coins</h3>
            <div class="input-group">
                <label for="swapDirectionSelect">Swap Direction</label>
                <select id="swapDirectionSelect" aria-label="Swap Direction">
                    <option value="ethToToken">ETH to Coin</option>
                    <option value="tokenToEth">Coin to ETH</option>
                </select>
            </div>
            <div class="input-group">
                <label for="swapTokenAddress">Coin Contract Address</label>
                <input type="text" id="swapTokenAddress" placeholder="Enter coin CA" aria-label="Coin Contract Address">
            </div>
            <div class="input-group">
                <label for="swapAmount">Amount to Swap</label>
                <input type="number" id="swapAmount" placeholder="Enter amount" step="0.0001" aria-label="Amount to Swap">
            </div>
            <div class="input-group">
                <label for="slippageTolerance">Slippage Tolerance</label>
                <select id="slippageTolerance" aria-label="Slippage Tolerance">
                    <option value="0.1">0.1%</option>
                    <option value="0.5">0.5%</option>
                    <option value="1" selected>1%</option>
                    <option value="3">3%</option>
                    <option value="5">5%</option>
                    <option value="10">10%</option>
                </select>
            </div>
            <div class="input-group">
                <label for="gasLimit">Gas Limit</label>
                <select id="gasLimit" aria-label="Gas Limit">
                    <option value="200000">200,000</option>
                    <option value="300000">300,000</option>
                    <option value="400000">400,000</option>
                    <option value="500000" selected>500,000</option>
                </select>
            </div>
            <button id="swapBtn">Swap</button>
            <div id="swapStatus"></div>
        </div>
        <div class="tab-content" id="getMoney">
            <h3>Get $Money</h3>
            <div class="input-group">
                <label for="moneyActionSelect">Action</label>
                <select id="moneyActionSelect" aria-label="Action">
                    <option value="buy">Buy $Money</option>
                    <option value="sell">Sell $Money</option>
                </select>
            </div>
            <div class="input-group">
                <label for="moneyAmount">Amount of ETH</label>
                <input type="number" id="moneyAmount" placeholder="Enter amount" step="0.0001" aria-label="Amount of ETH">
            </div>
            <div class="input-group">
                <label for="moneySlippageTolerance">Slippage Tolerance</label>
                <select id="moneySlippageTolerance" aria-label="Slippage Tolerance">
                    <option value="0.1">0.1%</option>
                    <option value="0.5">0.5%</option>
                    <option value="1" selected>1%</option>
                    <option value="3">3%</option>
                    <option value="5">5%</option>
                    <option value="10">10%</option>
                </select>
            </div>
            <div class="input-group">
                <label for="moneyGasLimit">Gas Limit</label>
                <select id="moneyGasLimit" aria-label="Gas Limit">
                    <option value="200000">200,000</option>
                    <option value="300000">300,000</option>
                    <option value="400000">400,000</option>
                    <option value="500000" selected>500,000</option>
                </select>
            </div>
            <button id="executeMoneyBtn">Execute</button>
        </div>
        <div class="tab-content" id="myCoins">
            <h3>My Coins</h3>
            <div class="input-group">
                <label for="coinContractAddress">Token Contract Address</label>
                <input type="text" id="coinContractAddress" placeholder="Enter token address" aria-label="Token Contract Address">
            </div>
            <button id="importCoinBtn">Import Coin</button>
            <div id="coinList">No coins imported yet.</div>
        </div>
        <div class="tab-content" id="volume">
            <h3>Volume Bot</h3>
            <iframe class="preview-window" src="https://moneyfund.com/volume"></iframe>
            <button id="volumeBotBtn">Volume Bot</button>
        </div>
        <div class="tab-content" id="status">
            <h3>Status</h3>
            <ul class="status-list" id="status-list"></ul>
        </div>
        <div class="tab-content" id="explorer">
            <h3>Block Explorer</h3>
            <div class="input-group">
                <label for="action">Select Action</label>
                <select id="action" aria-label="Select Action">
                    <option value="">-- Choose an action --</option>
                    <option value="balance">Get ETH Balance</option>
                    <option value="txlist">List Transactions</option>
                    <option value="tokentx">List Token Transactions</option>
                    <option value="tokennfttx">List NFT Transactions</option>
                    <option value="txlistinternal">List Internal Transactions</option>
                    <option value="gettxreceiptstatus">Get Transaction Status</option>
                    <option value="getblockbytime">Get Block by Timestamp</option>
                    <option value="getabi">Get Contract ABI</option>
                    <option value="tokensupply">Get Token Supply</option>
                    <option value="tokenbalance">Get Token Balance</option>
                    <option value="gasoracle">Get Gas Prices</option>
                    <option value="ethsupply">Get ETH Supply</option>
                    <option value="ethprice">Get ETH Price</option>
                    <option value="getlogs">Get Event Logs</option>
                </select>
            </div>
            <div id="addressInput" class="input-group" style="display: none;">
                <label for="address">Address</label>
                <input type="text" id="address" placeholder="e.g., 0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae">
            </div>
            <div id="txHashInput" class="input-group" style="display: none;">
                <label for="txHash">Transaction Hash</label>
                <input type="text" id="txHash" placeholder="e.g., 0x...">
            </div>
            <div id="blockTimeInput" class="input-group" style="display: none;">
                <label for="blockTime">Timestamp (UNIX)</label>
                <input type="number" id="blockTime" placeholder="e.g., 1677654321">
            </div>
            <div id="contractAddressInput" class="input-group" style="display: none;">
                <label for="contractAddress">Contract Address</label>
                <input type="text" id="contractAddress" placeholder="e.g., 0xdac17f958d2ee523a2206206994597c13d831ec7">
            </div>
            <div id="logInputs" class="input-group" style="display: none;">
                <label for="logAddress">Contract Address</label>
                <input type="text" id="logAddress" placeholder="e.g., 0xdac17f958d2ee523a2206206994597c13d831ec7">
                <label for="fromBlock">From Block</label>
                <input type="number" id="fromBlock" placeholder="e.g., 0">
                <label for="toBlock">To Block</label>
                <input type="number" id="toBlock" placeholder="e.g., 99999999">
            </div>
            <button id="explorerButton">Search</button>
            <div id="result">Results will appear here...</div>
        </div>
        <div class="tab-content" id="fiatSwap">
            <h3>Create Pair</h3>
            <iframe class="preview-window" src="https://moneyfund.com/dex/"></iframe>
            <button id="fiatSwapBtn">Create a Pair</button>
        </div>
        <div class="tab-content" id="getFund">
            <h3>Launch Fund</h3>
            <iframe class="preview-window" src="https://moneyfund.com/launcher/"></iframe>
            <button id="getFundBtn">Launch a Fund</button>
        </div>
        <div class="tab-content" id="createCoin">
            <h3>Launch Coin</h3>
            <iframe class="preview-window" src="https://moneyfund.com/deploy/"></iframe>
            <button id="createCoinBtn">Launch a Coin</button>
        </div>
        <div class="tab-content" id="getEth">
            <h3>Get .eth</h3>
            <iframe class="preview-window" src="https://moneyfund.com/etf/"></iframe>
            <button id="getEthBtn">Get .eth</button>
        </div>
        <div class="tab-content" id="airdrop">
            <h3>Airdrop</h3>
            <iframe class="preview-window" src="https://moneyfund.com/airdrop"></iframe>
            <button id="airdropBtn">Airdrop</button>
        </div>
        <div class="tab-content" id="launchStaking">
            <h3>Launch Staking</h3>
            <iframe class="preview-window" src="https://moneyfund.com/staking"></iframe>
            <button id="launchStakingBtn">Launch Staking</button>
        </div>
        <div class="tab-content" id="dividends">
            <h3>Dividends</h3>
            <iframe class="preview-window" src="https://moneyfund.com/dividends"></iframe>
            <button id="dividendsBtn">Dividends</button>
        </div>
        <div class="tab-content" id="vote">
            <h3>Vote</h3>
            <iframe class="preview-window" src="https://moneyfund.com/vote/"></iframe>
            <button id="voteBtn">Vote</button>
        </div>
        <div class="tab-content" id="manageLiquidity">
            <h3>Blackjack</h3>
            <iframe class="preview-window" src="https://moneyfund.com/blackjack"></iframe>
            <button id="manageLiquidityBtn">Play</button>
        </div>
        <div class="tab-content" id="dm">
            <h3>DMs</h3>
            <iframe class="preview-window" src="https://moneyfund.com/dm"></iframe>
            <button id="dmBtn">Visit My DMs</button>
        </div>
        <div class="tab-content" id="chat">
            <h3>Chat</h3>
            <iframe class="preview-window" src="https://moneyfund.com/chat"></iframe>
            <button id="chatBtn">Chat</button>
        </div>
    </div>

    <script>
        // Storage utility
        const Storage = {
            get: (key) => {
                try {
                    return JSON.parse(localStorage.getItem(key) || '[]');
                } catch (error) {
                    console.error(`Error parsing ${key}:`, error);
                    return [];
                }
            },
            set: (key, data) => {
                try {
                    localStorage.setItem(key, JSON.stringify(data));
                } catch (error) {
                    console.error(`Error setting ${key}:`, error);
                }
            },
            clear: (key) => localStorage.removeItem(key)
        };

        // Status box update function
        function updateStatusBox({ message, status = 'pending', txHash = null, address = null, quantity = null, direction = null, earnedMoney = null }) {
            const statusList = document.getElementById('status-list');
            const li = document.createElement('li');
            li.className = status;
            let text = message;
            if (quantity) text += ` | Quantity: ${quantity}`;
            if (direction) text += ` | Direction: ${direction}`;
            if (txHash) text += ` | Tx: <a href="https://etherscan.io/tx/${txHash}" target="_blank">${txHash.slice(0, 6)}...${txHash.slice(-4)}</a>`;
            if (address) text += ` | Address: ${address}`;
            if (earnedMoney) text += ` | Earned: ${earnedMoney} $Money`;
            li.innerHTML = text;
            statusList.prepend(li);
            if (statusList.children.length > 10) statusList.removeChild(statusList.lastChild);

            const statusEntry = {
                message,
                status,
                txHash,
                address,
                quantity,
                direction,
                earnedMoney,
                timestamp: Date.now()
            };
            const statuses = Storage.get('statuses');
            statuses.unshift(statusEntry);
            if (statuses.length > 50) statuses.pop();
            Storage.set('statuses', statuses);
        }

        // Load statuses from storage
        function loadStatusesFromStorage() {
            const statuses = Storage.get('statuses');
            const statusList = document.getElementById('status-list');
            statusList.innerHTML = '';
            statuses.forEach(({ message, status, txHash, address, quantity, direction, earnedMoney }) => {
                const li = document.createElement('li');
                li.className = status;
                let text = message;
                if (quantity) text += ` | Quantity: ${quantity}`;
                if (direction) text += ` | Direction: ${direction}`;
                if (txHash) text += ` | Tx: <a href="https://etherscan.io/tx/${txHash}" target="_blank">${txHash.slice(0, 6)}...${txHash.slice(-4)}</a>`;
                if (address) text += ` | Address: ${address}`;
                if (earnedMoney) text += ` | Earned: ${earnedMoney} $Money`;
                li.innerHTML = text;
                statusList.appendChild(li);
            });
            if (statusList.children.length > 10) {
                while (statusList.children.length > 10) {
                    statusList.removeChild(statusList.lastChild);
                }
            }
        }

        let selectedWallet = null;
        let vanityMode = false;

        // WalletInterface class
        class WalletInterface {
            constructor() {
                this.wallets = [];
                this.web3 = new Web3("https://mainnet.infura.io/v3/cf2916fb6dbc47ae824d6f36db817b73");
                this.uniswapRouterAddress = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D';
                this.moneyContractAddress = '0x100DB67F41A2dF3c32cC7c0955694b98339B7311';
                this.usdmContractAddress = '0x33d5be7c0584f77b3168b1d38e1a6215af242d4f';
                this.fundContractAddress = '0x758b92B13693B678eB0067452580C00f20413A5B';
                this.uniswapRouterABI = [
                    {"constant": false, "inputs": [{"name": "amountOutMin", "type": "uint256"}, {"name": "path", "type": "address[]"}, {"name": "to", "type": "address"}, {"name": "deadline", "type": "uint256"}], "name": "swapExactETHForTokens", "outputs": [{"name": "amounts", "type": "uint256[]"}], "payable": true, "stateMutability": "payable", "type": "function"},
                    {"constant": false, "inputs": [{"name": "amountIn", "type": "uint256"}, {"name": "amountOutMin", "type": "uint256"}, {"name": "path", "type": "address[]"}, {"name": "to", "type": "address"}, {"name": "deadline", "type": "uint256"}], "name": "swapExactTokensForETH", "outputs": [{"name": "amounts", "type": "uint256[]"}], "payable": false, "stateMutability": "nonpayable", "type": "function"},
                    {"constant": true, "inputs": [{"name": "amountIn", "type": "uint256"}, {"name": "path", "type": "address[]"}], "name": "getAmountsOut", "outputs": [{"name": "amounts", "type": "uint256[]"}], "type": "function"}
                ];
                this.erc20ABI = [
                    {"constant": true, "inputs": [{"name": "_owner", "type": "address"}], "name": "balanceOf", "outputs": [{"name": "balance", "type": "uint256"}], "type": "function"},
                    {"constant": true, "inputs": [], "name": "decimals", "outputs": [{"name": "", "type": "uint8"}], "type": "function"},
                    {"constant": false, "inputs": [{"name": "_spender", "type": "address"}, {"name": "_value", "type": "uint256"}], "name": "approve", "outputs": [{"name": "", "type": "bool"}], "type": "function"},
                    {"constant": false, "inputs": [{"name": "_to", "type": "address"}, {"name": "_value", "type": "uint256"}], "name": "transfer", "outputs": [{"name": "success", "type": "bool"}], "type": "function"}
                ];
                this.uniswapRouter = new this.web3.eth.Contract(this.uniswapRouterABI, this.uniswapRouterAddress);
                this.moneyContract = new this.web3.eth.Contract(this.erc20ABI, this.moneyContractAddress);
                this.usdmContract = new this.web3.eth.Contract(this.erc20ABI, this.usdmContractAddress);
                this.fundContract = new this.web3.eth.Contract(this.erc20ABI, this.fundContractAddress);
                this.slippageTolerance = 1;
                this.gasLimit = 500000;
                this.moneySlippageTolerance = 1;
                this.moneyGasLimit = 500000;
                this.API_KEY = "MB89VXUF27QJHA7QYJMPE9W55UGYZNV39C";
                this.BASE_URL = "https://api.etherscan.io/api";
                this.coinList = [];
            }

            init() {
                this.loadWalletsFromBrowser();
                this.attachEventListeners();
                this.loadCoinsFromStorage();
                loadStatusesFromStorage();
                this.setupTabNavigation();
            }

            setupTabNavigation() {
                const tabs = document.querySelectorAll('.tab');
                tabs.forEach(tab => {
                    tab.addEventListener('click', () => {
                        tabs.forEach(t => {
                            t.classList.remove('active');
                            t.setAttribute('aria-selected', 'false');
                        });
                        tab.classList.add('active');
                        tab.setAttribute('aria-selected', 'true');
                        const tabId = tab.getAttribute('data-tab');
                        document.querySelectorAll('.tab-content').forEach(content => {
                            content.classList.remove('active');
                            content.style.display = 'none';
                        });
                        const content = document.getElementById(tabId);
                        if (content) {
                            content.classList.add('active');
                            content.style.display = 'block';
                        }
                        document.getElementById('walletFunction').value = tabId;
                    });
                });
            }

            attachEventListeners() {
                document.getElementById('createMoneyFundBtn').addEventListener('click', () => this.createMoneyFundWallet());
                document.getElementById('transferFundsBtn').addEventListener('click', () => this.handleTransferFunds());
                document.getElementById('swapBtn').addEventListener('click', () => this.executeSwap());
                document.getElementById('explorerButton').addEventListener('click', () => this.searchExplorer());
                document.getElementById('executeMoneyBtn').addEventListener('click', () => this.executeMoneyAction());
                document.getElementById('importCoinBtn').addEventListener('click', () => this.importCoin());
                document.getElementById('fiatSwapBtn').addEventListener('click', () => {
                    window.open('https://moneyfund.com/dex/', '_blank');
                });
                document.getElementById('getFundBtn').addEventListener('click', () => {
                    window.open('https://moneyfund.com/launcher/', '_blank');
                });
                document.getElementById('createCoinBtn').addEventListener('click', () => {
                    window.open('https://moneyfund.com/deploy/', '_blank');
                });
                document.getElementById('getEthBtn').addEventListener('click', () => {
                    window.open('https://moneyfund.com/etf/', '_blank');
                });
                document.getElementById('airdropBtn').addEventListener('click', () => {
                    window.open('https://moneyfund.com/airdrop', '_blank');
                });
                document.getElementById('volumeBotBtn').addEventListener('click', () => {
                    window.open('https://moneyfund.com/volume', '_blank');
                });
                document.getElementById('dividendsBtn').addEventListener('click', () => {
                    window.open('https://moneyfund.com/dividends', '_blank');
                });
                document.getElementById('voteBtn').addEventListener('click', () => {
                    window.open('https://moneyfund.com/vote/', '_blank');
                });
                document.getElementById('manageLiquidityBtn').addEventListener('click', () => {
                    window.open('https://moneyfund.com/blackjack', '_blank');
                });
                document.getElementById('dmBtn').addEventListener('click', () => {
                    window.open('https://moneyfund.com/dm', '_blank');
                });
                document.getElementById('chatBtn').addEventListener('click', () => {
                    window.open('https://moneyfund.com/chat', '_blank');
                });
                document.getElementById('launchStakingBtn').addEventListener('click', () => {
                    window.open('https://moneyfund.com/staking', '_blank');
                });
                document.getElementById('copyAddressBtn').addEventListener('click', () => this.copyWalletAddress());
                document.getElementById('recipientAddress').addEventListener('input', this.debounce(this.resolveENS.bind(this), 500));
                document.getElementById('exportWalletsBtn').addEventListener('click', () => this.exportWallets());
                document.getElementById('importWalletFile').addEventListener('change', (event) => this.importWallets(event));
                document.getElementById('vanityModeToggle').addEventListener('change', (event) => {
                    vanityMode = event.target.checked;
                    updateStatusBox({
                        message: `0x100 Mode ${vanityMode ? 'Enabled' : 'Disabled'}`,
                        status: 'success'
                    });
                });
                document.getElementById('walletSelector').addEventListener('change', (e) => this.selectWallet(e.target.value));

                const inputs = ['address', 'txHash', 'blockTime', 'contractAddress', 'logAddress', 'fromBlock', 'toBlock'];
                inputs.forEach(id => {
                    const input = document.getElementById(id);
                    if (input) {
                        input.addEventListener('input', this.debouncedSearchExplorer);
                    }
                });
            }

            debounce(fn, delay) {
                let timeout;
                return (...args) => {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => fn.apply(this, args), delay);
                };
            }

            debouncedSearchExplorer = this.debounce(function(e) {
                const action = document.getElementById('action').value;
                if (action && e.target.value) {
                    this.searchExplorer();
                }
            }, 500);

            async resolveENS() {
                const recipientInput = document.getElementById('recipientAddress');
                const inputValue = recipientInput.value.trim();
                if (inputValue.endsWith('.eth')) {
                    updateStatusBox({ message: 'Resolving ENS name...', status: 'pending' });
                    try {
                        const resolvedAddress = await this.web3.eth.ens.getAddress(inputValue);
                        if (resolvedAddress) {
                            recipientInput.value = resolvedAddress;
                            updateStatusBox({
                                message: `ENS resolved: ${inputValue} → ${resolvedAddress}`,
                                status: 'success',
                                address: resolvedAddress
                            });
                        } else {
                            updateStatusBox({
                                message: `No address found for ENS name: ${inputValue}`,
                                status: 'error'
                            });
                        }
                    } catch (error) {
                        updateStatusBox({
                            message: `Failed to resolve ENS: ${error.message}`,
                            status: 'error'
                        });
                    }
                }
            }

            async getCurrentGasPrice() {
                try {
                    const gasPrice = await this.web3.eth.getGasPrice();
                    return this.web3.utils.toBN(gasPrice);
                } catch (error) {
                    console.error('Failed to fetch gas price:', error);
                    throw error;
                }
            }

            async createMoneyFundWallet() {
                updateStatusBox({ message: 'Creating MoneyFund Wallet...', status: 'pending' });
                try {
                    let wallet;
                    if (vanityMode) {
                        let attempts = 0;
                        while (true) {
                            attempts++;
                            wallet = this.web3.eth.accounts.create();
                            if (wallet.address.startsWith('0x100')) break;
                            if (attempts > 10000) {
                                updateStatusBox({
                                    message: 'Failed to generate 0x100 address after 10000 attempts',
                                    status: 'error'
                                });
                                return;
                            }
                        }
                    } else {
                        wallet = this.web3.eth.accounts.create();
                    }
                    selectedWallet = { address: wallet.address, privateKey: wallet.privateKey, type: 'moneyfund' };
                    this.wallets.push(selectedWallet);
                    this.saveWalletsToBrowser();
                    this.updateWalletSelector();
                    this.updateWalletAcrossApp();
                    this.fetchBalance();
                    
                    setTimeout(() => {
                        updateStatusBox({
                            message: 'MoneyFund Wallet Created',
                            status: 'success',
                            address: wallet.address
                        });
                    }, 1000);
                } catch (error) {
                    console.error("Error creating MoneyFund wallet:", error);
                    updateStatusBox({
                        message: 'Failed to create wallet: ' + error.message,
                        status: 'error'
                    });
                }
            }

            updateWalletAcrossApp() {
                if (!selectedWallet) return;
                this.updateWalletInfo(this.wallets.findIndex(w => w.address === selectedWallet.address));
                this.updateConnectedWalletAddress();
            }

            handleWalletFunction(value) {
                const sections = [
                    'home', 'transactions', 'swap', 'getMoney', 'myCoins', 'volume', 'status',
                    'explorer', 'fiatSwap', 'getFund', 'createCoin', 'getEth', 'airdrop',
                    'launchStaking', 'dividends', 'vote', 'manageLiquidity', 'dm', 'chat'
                ];
                sections.forEach(section => {
                    const element = document.getElementById(section);
                    if (element) {
                        element.style.display = section === value ? 'block' : 'none';
                        element.classList.toggle('active', section === value);
                    }
                });
                if (value === 'import') {
                    document.getElementById('importWalletFile').click();
                } else if (value === 'export') {
                    this.exportWallets();
                } else if (value === 'transactions') {
                    document.getElementById('statusDisplay').textContent = 'Status: Ready';
                } else if (value === 'swap') {
                    document.getElementById('swapStatus').textContent = '';
                } else if (value === 'getMoney') {
                    this.updateMoneyInfo();
                } else if (value === 'myCoins') {
                    this.displayCoinList();
                }
                const tabs = document.querySelectorAll('.tab');
                tabs.forEach(tab => {
                    const tabId = tab.getAttribute('data-tab');
                    tab.classList.toggle('active', tabId === value);
                    tab.setAttribute('aria-selected', tabId === value ? 'true' : 'false');
                });
            }

            manageWallets() {
                return Storage.get('wallets');
            }

            saveWalletsToBrowser() {
                Storage.set('wallets', this.wallets);
            }

            async fetchBalance() {
                if (!selectedWallet) return;
                try {
                    const balanceWei = await this.web3.eth.getBalance(selectedWallet.address);
                    const balanceEther = this.web3.utils.fromWei(balanceWei, 'ether');
                    document.getElementById('balanceDisplay').textContent = `${balanceEther} ETH`;
                    this.updateMoneyInfo();
                    this.updateUSDMBalance();
                    this.updateTotalUSDValue();
                } catch (error) {
                    console.error("Error fetching balance:", error);
                    document.getElementById('balanceDisplay').textContent = 'Error ETH';
                }
            }

            async updateUSDMBalance() {
                if (!selectedWallet) return;
                try {
                    const usdmBalanceWei = await this.usdmContract.methods.balanceOf(selectedWallet.address).call();
                    const usdmBalanceEther = this.web3.utils.fromWei(usdmBalanceWei, 'ether');
                    document.getElementById('usdmBalance').textContent = `${usdmBalanceEther} USDM`;
                } catch (error) {
                    console.error('Error fetching USDM balance:', error);
                    document.getElementById('usdmBalance').textContent = 'Error USDM';
                }
            }

            async updateTotalUSDValue() {
                if (!selectedWallet) return;
                try {
                    let totalUSD = 0;

                    const ethPriceResponse = await fetch(`${this.BASE_URL}?module=stats&action=ethprice&apikey=${this.API_KEY}`);
                    const ethPriceData = await ethPriceResponse.json();
                    const ethPriceUSD = ethPriceData.result?.ethusd || 2000;

                    const ethBalanceWei = await this.web3.eth.getBalance(selectedWallet.address);
                    const ethBalanceEther = parseFloat(this.web3.utils.fromWei(ethBalanceWei, 'ether'));
                    totalUSD += ethBalanceEther * ethPriceUSD;

                    const moneyBalanceWei = await this.moneyContract.methods.balanceOf(selectedWallet.address).call();
                    const moneyBalanceEther = parseFloat(this.web3.utils.fromWei(moneyBalanceWei, 'ether'));
                    totalUSD += moneyBalanceEther * 1;

                    const usdmBalanceWei = await this.usdmContract.methods.balanceOf(selectedWallet.address).call();
                    const usdmBalanceEther = parseFloat(this.web3.utils.fromWei(usdmBalanceWei, 'ether'));
                    totalUSD += usdmBalanceEther * 1;

                    const fundBalanceWei = await this.fundContract.methods.balanceOf(selectedWallet.address).call();
                    const fundBalanceEther = parseFloat(this.web3.utils.fromWei(fundBalanceWei, 'ether'));
                    totalUSD += fundBalanceEther * 0.50;

                    for (const coin of this.coinList) {
                        try {
                            const tokenContract = new this.web3.eth.Contract(this.erc20ABI, coin.address);
                            const balanceWei = await tokenContract.methods.balanceOf(selectedWallet.address).call();
                            const decimals = await tokenContract.methods.decimals().call();
                            const balance = parseFloat(this.web3.utils.fromWei(balanceWei, 'ether'));
                            const tokenPriceUSD = 0.10;
                            totalUSD += balance * tokenPriceUSD;
                        } catch (error) {
                            console.error(`Error fetching balance for token ${coin.address}:`, error);
                        }
                    }

                    document.getElementById('totalUSD').textContent = `${totalUSD.toFixed(2)} USD`;
                } catch (error) {
                    console.error('Error calculating total USD value:', error);
                    document.getElementById('totalUSD').textContent = 'Error USD';
                }
            }

            updateWalletSelector() {
                const selector = document.getElementById('walletSelector');
                selector.innerHTML = '<option value="">-- Select Wallet --</option>';
                this.wallets.forEach((wallet, index) => {
                    const option = document.createElement('option');
                    option.value = index;
                    option.innerHTML = `<span class="wallet-address"><span>${wallet.address.slice(0, 5)}</span>${wallet.address.slice(5, 6)}</span>...${wallet.address.slice(-4)} (MoneyFund)`;
                    selector.appendChild(option);
                });
            }

            selectWallet(index) {
                const idx = parseInt(index);
                if (idx >= 0 && idx < this.wallets.length) {
                    selectedWallet = this.wallets[idx];
                    this.updateWalletAcrossApp();
                    this.fetchBalance();
                }
            }

            async updateWalletInfo(index) {
                if (index < 0 || index >= this.wallets.length) return;
                const wallet = this.wallets[index];
                document.getElementById('generationInfo').textContent = '';
                document.getElementById('home').style.display = 'block';
                await this.fetchBalance();
                const selectedFunction = document.getElementById('walletFunction').value;
                if (selectedFunction === 'getMoney') {
                    this.updateMoneyInfo();
                } else if (selectedFunction === 'myCoins') {
                    this.displayCoinList();
                }
            }

            loadWalletsFromBrowser() {
                this.wallets = this.manageWallets();
                this.updateWalletSelector();
                if (this.wallets.length > 0) {
                    selectedWallet = this.wallets[0];
                    this.updateWalletAcrossApp();
                    this.fetchBalance();
                }
            }

            toggleSendType() {
                const sendType = document.getElementById('sendTypeSelect').value;
                document.getElementById('tokenDetails').style.display = sendType === 'Token' ? 'block' : 'none';
            }

            toggleGasPriceInput() {
                const gasPriceOption = document.getElementById('gasPriceOption').value;
                const gasPriceInput = document.getElementById('gasPriceInput');
                gasPriceInput.style.display = gasPriceOption === 'manual' ? 'block' : 'none';
            }

            async handleTransferFunds() {
                let recipient = document.getElementById('recipientAddress').value.trim();
                const amountInput = document.getElementById('amount').value.trim();
                const gasPriceOption = document.getElementById('gasPriceOption').value;
                let gasPriceInput = gasPriceOption === 'manual' ? document.getElementById('gasPrice').value.trim() : null;
                const type = document.getElementById('sendTypeSelect').value;

                if (!recipient || !amountInput) {
                    updateStatusBox({ message: 'Please fill in all required fields.', status: 'error' });
                    return;
                }
                if (!selectedWallet) {
                    updateStatusBox({ message: 'Please select a wallet first.', status: 'error' });
                    return;
                }

                if (!this.web3.utils.isAddress(recipient)) {
                    updateStatusBox({ message: 'Invalid recipient address.', status: 'error' });
                    return;
                }

                const BN = this.web3.utils.toBN;
                const amount = BN(this.web3.utils.toWei(amountInput, 'ether'));

                let gasPrice;
                if (gasPriceOption === 'auto' || !gasPriceInput) {
                    gasPrice = await this.getCurrentGasPrice();
                } else {
                    gasPrice = BN(this.web3.utils.toWei(gasPriceInput, 'gwei'));
                }

                const estimatedGas = type === 'ETH' ? 21000 : 50000;

                updateStatusBox({
                    message: 'Estimating gas...',
                    status: 'pending',
                    quantity: amountInput,
                    token: type === 'ETH' ? 'ETH' : 'Tokens'
                });

                let tx;
                try {
                    if (type === 'ETH') {
                        tx = {
                            from: selectedWallet.address,
                            to: recipient,
                            value: amount,
                            gas: estimatedGas,
                            gasPrice: gasPrice
                        };
                    } else {
                        const tokenAddress = document.getElementById('tokenAddress').value.trim();
                        const tokenContract = new this.web3.eth.Contract(this.erc20ABI, tokenAddress);
                        tx = {
                            from: selectedWallet.address,
                            to: tokenAddress,
                            data: tokenContract.methods.transfer(recipient, amount).encodeABI(),
                            gas: estimatedGas,
                            gasPrice: gasPrice
                        };
                    }
                    updateStatusBox({
                        message: 'Sending transaction...',
                        status: 'pending',
                        quantity: amountInput,
                        token: type === 'ETH' ? 'ETH' : 'Tokens'
                    });
                    const signedTx = await this.web3.eth.accounts.signTransaction(tx, selectedWallet.privateKey);
                    this.web3.eth.sendSignedTransaction(signedTx.rawTransaction)
                        .on('transactionHash', (hash) => {
                            updateStatusBox({
                                message: 'Transaction sent...',
                                status: 'pending',
                                txHash: hash,
                                quantity: amountInput
                            });
                        })
                        .on('receipt', (receipt) => {
                            updateStatusBox({
                                message: 'Transaction complete',
                                status: 'success',
                                txHash: receipt.transactionHash,
                                quantity: amountInput
                            });
                        })
                        .on('error', (err) => {
                            updateStatusBox({
                                message: 'Transaction failed: ' + err.message,
                                status: 'error'
                            });
                        });
                    this.fetchBalance();
                } catch (error) {
                    console.error('Transfer error:', error);
                    updateStatusBox({
                        message: 'Transfer failed: ' + error.message,
                        status: 'error'
                    });
                }
            }

            updateSlippage() {
                this.slippageTolerance = parseFloat(document.getElementById('slippageTolerance').value);
                document.getElementById('swapStatus').textContent = `Slippage tolerance set to ${this.slippageTolerance}%`;
            }

            updateGasLimit() {
                this.gasLimit = parseInt(document.getElementById('gasLimit').value);
                document.getElementById('swapStatus').textContent = `Gas limit set to ${this.gasLimit}`;
            }

            async executeSwap() {
                if (!selectedWallet) {
                    updateStatusBox({ message: 'Please select a wallet first.', status: 'error' });
                    return;
                }
                const direction = document.getElementById('swapDirectionSelect').value;
                const tokenAddress = document.getElementById('swapTokenAddress').value.trim();
                const amountInput = document.getElementById('swapAmount').value.trim();
                const directionText = direction === 'ethToToken' ? `ETH → ${tokenAddress}` : `${tokenAddress} → ETH`;

                const amountNum = parseFloat(amountInput);
                if (!tokenAddress || isNaN(amountNum) || amountNum <= 0 || /\de\+/.test(amountInput)) {
                    updateStatusBox({
                        message: 'Please enter a valid token address and positive amount (no scientific notation).',
                        status: 'error'
                    });
                    return;
                }

                const BN = this.web3.utils.toBN;
                const amount = BN(this.web3.utils.toWei(amountInput, 'ether'));

                updateStatusBox({
                    message: 'Swapping...',
                    status: 'pending',
                    quantity: amountInput,
                    direction: directionText
                });

                try {
                    const ethBalanceWei = await this.web3.eth.getBalance(selectedWallet.address);
                    const ethBalanceEther = this.web3.utils.fromWei(ethBalanceWei, 'ether');
                    const gasPrice = await this.getCurrentGasPrice();
                    const estimatedGasCost = this.web3.utils.fromWei(BN(this.gasLimit).mul(gasPrice), 'ether');

                    if (direction === 'ethToToken') {
                        if (parseFloat(ethBalanceEther) < (parseFloat(amountInput) + parseFloat(estimatedGasCost))) {
                            updateStatusBox({
                                message: `Insufficient ETH balance. Need at least ${(parseFloat(amountInput) + parseFloat(estimatedGasCost)).toFixed(6)} ETH.`,
                                status: 'error'
                            });
                            return;
                        }
                        const path = ["0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", tokenAddress];
                        const amounts = await this.uniswapRouter.methods.getAmountsOut(amount, path).call();
                        if (!amounts || amounts.length < 2) {
                            updateStatusBox({
                                message: 'Invalid token or insufficient liquidity.',
                                status: 'error'
                            });
                            return;
                        }
                        const expectedOutput = amounts[1];
                        const slippage = 1 - (this.slippageTolerance / 100);
                        const amountOutMin = BN(expectedOutput).muln(slippage * 1000).divn(1000).toString();
                        const tx = {
                            from: selectedWallet.address,
                            to: this.uniswapRouterAddress,
                            data: this.uniswapRouter.methods.swapExactETHForTokens(amountOutMin, path, selectedWallet.address, Math.floor(Date.now() / 1000) + 120).encodeABI(),
                            value: amount,
                            gas: this.gasLimit,
                            gasPrice: gasPrice
                        };
                        const tokenContract = new this.web3.eth.Contract(this.erc20ABI, tokenAddress);
                        const initialBalanceWei = await tokenContract.methods.balanceOf(selectedWallet.address).call();
                        const signedTx = await this.web3.eth.accounts.signTransaction(tx, selectedWallet.privateKey);
                        this.web3.eth.sendSignedTransaction(signedTx.rawTransaction)
                            .on('transactionHash', (hash) => {
                                updateStatusBox({
                                    message: 'Swap transaction sent...',
                                    status: 'pending',
                                    txHash: hash,
                                    direction: directionText
                                });
                            })
                            .on('receipt', async (receipt) => {
                                const finalBalanceWei = await tokenContract.methods.balanceOf(selectedWallet.address).call();
                                const decimals = await tokenContract.methods.decimals().call();
                                const tokenReceivedWei = BN(finalBalanceWei).sub(BN(initialBalanceWei));
                                const tokenReceived = (tokenReceivedWei.div(BN(10).pow(BN(decimals)))).toString();
                                updateStatusBox({
                                    message: `Swapped successfully! Received ${tokenReceived} tokens`,
                                    status: 'success',
                                    quantity: tokenReceived,
                                    txHash: receipt.transactionHash,
                                    direction: directionText
                                });
                            })
                            .on('error', (err) => {
                                updateStatusBox({
                                    message: 'Swap failed: ' + err.message,
                                    status: 'error'
                                });
                            });
                    } else if (direction === 'tokenToEth') {
    const tokenContract = new this.web3.eth.Contract(this.erc20ABI, tokenAddress);
    const approveTx = {
        from: selectedWallet.address,
        to: tokenAddress,
        data: tokenContract.methods.approve(this.uniswapRouterAddress, amount).encodeABI(),
        gas: 50000,
        gasPrice: gasPrice
    };
    const signedApproveTx = await this.web3.eth.accounts.signTransaction(approveTx, selectedWallet.privateKey);
    await this.web3.eth.sendSignedTransaction(signedApproveTx.rawTransaction);
    const path = [tokenAddress, "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"];
    const amounts = await this.uniswapRouter.methods.getAmountsOut(amount, path).call();
    if (!amounts || amounts.length < 2) {
        updateStatusBox({
            message: 'Invalid token or insufficient liquidity.',
            status: 'error'
        });
        return;
    }
    const expectedOutput = amounts[1];
    const slippage = 1 - (this.slippageTolerance / 100);
    const amountOutMin = BN(expectedOutput).muln(slippage * 1000).divn(1000).toString();
    const tx = {
        from: selectedWallet.address,
        to: this.uniswapRouterAddress,
        data: this.uniswapRouter.methods.swapExactTokensForETH(amount, amountOutMin, path, selectedWallet.address, Math.floor(Date.now() / 1000) + 120).encodeABI(),
        gas: this.gasLimit,
        gasPrice: gasPrice
    };
    const initialBalanceWei = BN(await this.web3.eth.getBalance(selectedWallet.address));
    const signedTx = await this.web3.eth.accounts.signTransaction(tx, selectedWallet.privateKey);
    this.web3.eth.sendSignedTransaction(signedTx.rawTransaction)
        .on('transactionHash', (hash) => {
            updateStatusBox({
                message: 'Swap transaction sent...',
                status: 'pending',
                txHash: hash,
                direction: directionText
            });
        })
        .on('receipt', async (receipt) => {
            const finalBalanceWei = BN(await this.web3.eth.getBalance(selectedWallet.address));
            const ethReceivedWei = finalBalanceWei.sub(initialBalanceWei);
            const ethReceivedEther = this.web3.utils.fromWei(ethReceivedWei.toString(), 'ether');
            updateStatusBox({
                message: `Swapped successfully! Received ${ethReceivedEther} ETH`,
                status: 'success',
                quantity: ethReceivedEther,
                txHash: receipt.transactionHash,
                direction: directionText
            });
            this.fetchBalance();
        })
        .on('error', (err) => {
            updateStatusBox({
                message: 'Swap failed: ' + err.message,
                status: 'error'
            });
        });
}
} catch (error) {
console.error('Swap error:', error);
updateStatusBox({
    message: 'Swap failed: ' + error.message,
    status: 'error'
});
}
}

toggleInputs() {
const action = document.getElementById("action").value;
const inputs = ['addressInput', 'txHashInput', 'blockTimeInput', 'contractAddressInput', 'logInputs'];
inputs.forEach(id => document.getElementById(id).classList.remove('active'));

switch (action) {
    case 'balance':
    case 'txlist':
    case 'tokentx':
    case 'tokennfttx':
    case 'txlistinternal':
        document.getElementById('addressInput').classList.add('active');
        if (action === 'tokentx' || action === 'tokenbalance') {
            document.getElementById('contractAddressInput').classList.add('active');
        }
        break;
    case 'gettxreceiptstatus':
        document.getElementById('txHashInput').classList.add('active');
        break;
    case 'getblockbytime':
        document.getElementById('blockTimeInput').classList.add('active');
        break;
    case 'getabi':
    case 'tokensupply':
        document.getElementById('contractAddressInput').classList.add('active');
        break;
    case 'tokenbalance':
        document.getElementById('addressInput').classList.add('active');
        document.getElementById('contractAddressInput').classList.add('active');
        break;
    case 'getlogs':
        document.getElementById('logInputs').classList.add('active');
        break;
}
}

async searchExplorer() {
const action = document.getElementById("action").value;
if (!action) {
    updateStatusBox({ message: 'Please select an action!', status: 'error' });
    return;
}
const resultDiv = document.getElementById("result");
resultDiv.textContent = "Fetching...";
updateStatusBox({ message: 'Fetching explorer data...', status: 'pending' });
let url;
try {
    switch (action) {
        case "balance":
            url = `${this.BASE_URL}?module=account&action=balance&address=${document.getElementById("address").value}&tag=latest&apikey=${this.API_KEY}`;
            break;
        case "txlist":
            url = `${this.BASE_URL}?module=account&action=txlist&address=${document.getElementById("address").value}&startblock=0&endblock=99999999&sort=desc&apikey=${this.API_KEY}`;
            break;
        case "tokentx":
            url = `${this.BASE_URL}?module=account&action=tokentx&address=${document.getElementById("address").value}&contractaddress=${document.getElementById("contractAddress").value}&startblock=0&endblock=99999999&sort=desc&apikey=${this.API_KEY}`;
            break;
        case "tokennfttx":
            url = `${this.BASE_URL}?module=account&action=tokennfttx&address=${document.getElementById("address").value}&startblock=0&endblock=99999999&sort=desc&apikey=${this.API_KEY}`;
            break;
        case "txlistinternal":
            url = `${this.BASE_URL}?module=account&action=txlistinternal&address=${document.getElementById("address").value}&startblock=0&endblock=99999999&sort=desc&apikey=${this.API_KEY}`;
            break;
        case "gettxreceiptstatus":
            url = `${this.BASE_URL}?module=transaction&action=gettxreceiptstatus&txhash=${document.getElementById("txHash").value}&apikey=${this.API_KEY}`;
            break;
        case "getblockbytime":
            url = `${this.BASE_URL}?module=block&action=getblocknobytimestamp=${document.getElementById("blockTime").value}&closest=before&apikey=${this.API_KEY}`;
            break;
        case "getabi":
            url = `${this.BASE_URL}?module=contract&action=getabi&address=${document.getElementById("contractAddress").value}&apikey=${this.API_KEY}`;
            break;
        case "tokensupply":
            url = `${this.BASE_URL}?module=stats&action=tokensupply&contractaddress=${document.getElementById("contractAddress").value}&apikey=${this.API_KEY}`;
            break;
        case "tokenbalance":
            url = `${this.BASE_URL}?module=account&action=tokenbalance&contractaddress=${document.getElementById("contractAddress").value}&address=${document.getElementById("address").value}&tag=latest&apikey=${this.API_KEY}`;
            break;
        case "gasoracle":
            url = `${this.BASE_URL}?module=gastracker&action=gasoracle&apikey=${this.API_KEY}`;
            break;
        case "ethsupply":
            url = `${this.BASE_URL}?module=stats&action=ethsupply&apikey=${this.API_KEY}`;
            break;
        case "ethprice":
            url = `${this.BASE_URL}?module=stats&action=ethprice&apikey=${this.API_KEY}`;
            break;
        case "getlogs":
            url = `${this.BASE_URL}?module=logs&action=getLogs&address=${document.getElementById("logAddress").value}&fromBlock=${document.getElementById("fromBlock").value}&toBlock=${document.getElementById("toBlock").value}&apikey=${this.API_KEY}`;
            break;
        default:
            throw new Error("Invalid action");
    }
    const response = await fetch(url);
    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
    const data = await response.json();
    let formattedResult;
    if (data.status === "1" || action === "getabi") {
        switch (action) {
            case "balance":
                formattedResult = `ETH Balance: ${(parseInt(data.result) / 1e18).toFixed(6)} ETH`;
                break;
            case "txlist":
            case "tokentx":
            case "tokennfttx":
            case "txlistinternal":
                formattedResult = "Recent Transactions:\n";
                data.result.slice(0, 5).forEach((tx, i) => {
                    formattedResult += `${i + 1}. Hash: ${tx.hash}\n   Value: ${(parseInt(tx.value) / 1e18).toFixed(6)} ETH\n   Block: ${tx.blockNumber}\n\n`;
                });
                if (data.result.length > 5) formattedResult += `...and ${data.result.length - 5} more`;
                break;
            case "gettxreceiptstatus":
                formattedResult = `Transaction Status: ${data.result.status === "1" ? "Success" : "Failed"}`;
                break;
            case "getblockbytime":
                formattedResult = `Block Number: ${data.result}`;
                break;
            case "getabi":
                formattedResult = `Contract ABI:\n${data.result.substring(0, 100)}... (truncated)`;
                break;
            case "tokensupply":
                formattedResult = `Token Supply: ${(parseInt(data.result) / 1e18).toFixed(6)}`;
                break;
            case "tokenbalance":
                formattedResult = `Token Balance: ${(parseInt(data.result) / 1e18).toFixed(6)}`;
                break;
            case "gasoracle":
                formattedResult = `Gas Prices:\n- SafeLow: ${data.result.SafeGasPrice} Gwei\n- Propose: ${data.result.ProposeGasPrice} Gwei\n- Fast: ${data.result.FastGasPrice} Gwei`;
                break;
            case "ethsupply":
                formattedResult = `Total ETH Supply: ${(parseInt(data.result) / 1e18).toFixed(2)} ETH`;
                break;
            case "ethprice":
                formattedResult = `ETH Price: $${data.result.ethusd} USD`;
                break;
            case "getlogs":
                formattedResult = "Event Logs:\n";
                data.result.slice(0, 5).forEach((log, i) => {
                    formattedResult += `${i + 1}. Block: ${log.blockNumber}\n   Data: ${log.data.substring(0, 20)}...\n\n`;
                });
                if (data.result.length > 5) formattedResult += `...and ${data.result.length - 5} more`;
                break;
        }
        updateStatusBox({ message: 'Explorer data fetched successfully', status: 'success' });
    } else {
        formattedResult = `Error from Etherscan: ${data.message || "No data returned"}`;
        updateStatusBox({
            message: `Etherscan error: ${data.message || "No data returned"}`,
            status: 'error'
        });
    }
    resultDiv.textContent = formattedResult || "No result data available";
} catch (error) {
    resultDiv.textContent = `Error: ${error.message}`;
    updateStatusBox({ message: `Explorer error: ${error.message}`, status: 'error' });
}
}

async updateMoneyInfo() {
if (!selectedWallet) return;
const wallet = selectedWallet.address;
try {
    const moneyBalanceWei = await this.moneyContract.methods.balanceOf(wallet).call();
    const moneyBalanceEther = this.web3.utils.fromWei(moneyBalanceWei, 'ether');
    document.getElementById('myMoney').textContent = `${moneyBalanceEther} MONEY`;
    this.updateTotalUSDValue();
} catch (error) {
    console.error('Error fetching $Money info:', error);
    document.getElementById('myMoney').textContent = 'Error MONEY';
}
}

updateMoneySlippage() {
this.moneySlippageTolerance = parseFloat(document.getElementById('moneySlippageTolerance').value);
}

updateMoneyGasLimit() {
this.moneyGasLimit = parseInt(document.getElementById('moneyGasLimit').value);
}

async executeMoneyAction() {
if (!selectedWallet) {
    updateStatusBox({ message: 'Please select a wallet first.', status: 'error' });
    return;
}
const action = document.getElementById('moneyActionSelect').value;
const amountInput = document.getElementById('moneyAmount').value.trim();
const amountNum = parseFloat(amountInput);
if (isNaN(amountNum) || amountNum <= 0 || /\de\+/.test(amountInput)) {
    updateStatusBox({
        message: 'Please enter a valid positive amount (no scientific notation).',
        status: 'error'
    });
    return;
}

const BN = this.web3.utils.toBN;
const amount = BN(this.web3.utils.toWei(amountInput, 'ether'));
const directionText = action === 'buy' ? 'ETH → $Money' : '$Money → ETH';

updateStatusBox({
    message: `${action === 'buy' ? 'Buying' : 'Selling'} $Money...`,
    status: 'pending',
    quantity: amountInput,
    direction: directionText
});

try {
    const ethBalanceWei = await this.web3.eth.getBalance(selectedWallet.address);
    const ethBalanceEther = this.web3.utils.fromWei(ethBalanceWei, 'ether');
    const gasPrice = await this.getCurrentGasPrice();
    const estimatedGasCost = this.web3.utils.fromWei(BN(this.moneyGasLimit).mul(gasPrice), 'ether');

    if (action === 'buy') {
        if (parseFloat(ethBalanceEther) < (parseFloat(amountInput) + parseFloat(estimatedGasCost))) {
            updateStatusBox({
                message: `Insufficient ETH balance. Need at least ${(parseFloat(amountInput) + parseFloat(estimatedGasCost)).toFixed(6)} ETH.`,
                status: 'error'
            });
            return;
        }
        const path = ["0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", this.moneyContractAddress];
        const amounts = await this.uniswapRouter.methods.getAmountsOut(amount, path).call();
        if (!amounts || amounts.length < 2) {
            updateStatusBox({
                message: 'Invalid token or insufficient liquidity.',
                status: 'error'
            });
            return;
        }
        const expectedOutput = amounts[1];
        const slippage = 1 - (this.moneySlippageTolerance / 100);
        const amountOutMin = BN(expectedOutput).muln(slippage * 1000).divn(1000).toString();
        const tx = {
            from: selectedWallet.address,
            to: this.uniswapRouterAddress,
            data: this.uniswapRouter.methods.swapExactETHForTokens(amountOutMin, path, selectedWallet.address, Math.floor(Date.now() / 1000) + 120).encodeABI(),
            value: amount,
            gas: this.moneyGasLimit,
            gasPrice: gasPrice
        };
        const initialBalanceWei = await this.moneyContract.methods.balanceOf(selectedWallet.address).call();
        const signedTx = await this.web3.eth.accounts.signTransaction(tx, selectedWallet.privateKey);
        this.web3.eth.sendSignedTransaction(signedTx.rawTransaction)
            .on('transactionHash', (hash) => {
                updateStatusBox({
                    message: 'Transaction sent...',
                    status: 'pending',
                    txHash: hash,
                    direction: directionText
                });
            })
            .on('receipt', async (receipt) => {
                const finalBalanceWei = await this.moneyContract.methods.balanceOf(selectedWallet.address).call();
                const moneyReceivedWei = BN(finalBalanceWei).sub(BN(initialBalanceWei));
                const moneyReceived = this.web3.utils.fromWei(moneyReceivedWei.toString(), 'ether');
                updateStatusBox({
                    message: `Successfully bought ${moneyReceived} $Money`,
                    status: 'success',
                    quantity: moneyReceived,
                    txHash: receipt.transactionHash,
                    direction: directionText,
                    earnedMoney: (Math.random() * (0.1 - 0.01) + 0.01).toFixed(2)
                });
                this.updateMoneyInfo();
                this.fetchBalance();
            })
            .on('error', (err) => {
                updateStatusBox({
                    message: 'Transaction failed: ' + err.message,
                    status: 'error'
                });
            });
    } else if (action === 'sell') {
        const moneyBalanceWei = await this.moneyContract.methods.balanceOf(selectedWallet.address).call();
        if (BN(moneyBalanceWei).lt(amount)) {
            updateStatusBox({
                message: `Insufficient $Money balance. You have ${this.web3.utils.fromWei(moneyBalanceWei, 'ether')} $Money.`,
                status: 'error'
            });
            return;
        }
        const approveTx = {
            from: selectedWallet.address,
            to: this.moneyContractAddress,
            data: this.moneyContract.methods.approve(this.uniswapRouterAddress, amount).encodeABI(),
            gas: 50000,
            gasPrice: gasPrice
        };
        const signedApproveTx = await this.web3.eth.accounts.signTransaction(approveTx, selectedWallet.privateKey);
        await this.web3.eth.sendSignedTransaction(signedApproveTx.rawTransaction);
        const path = [this.moneyContractAddress, "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"];
        const amounts = await this.uniswapRouter.methods.getAmountsOut(amount, path).call();
        if (!amounts || amounts.length < 2) {
            updateStatusBox({
                message: 'Invalid token or insufficient liquidity.',
                status: 'error'
            });
            return;
        }
        const expectedOutput = amounts[1];
        const slippage = 1 - (this.moneySlippageTolerance / 100);
        const amountOutMin = BN(expectedOutput).muln(slippage * 1000).divn(1000).toString();
        const tx = {
            from: selectedWallet.address,
            to: this.uniswapRouterAddress,
            data: this.uniswapRouter.methods.swapExactTokensForETH(amount, amountOutMin, path, selectedWallet.address, Math.floor(Date.now() / 1000) + 120).encodeABI(),
            gas: this.moneyGasLimit,
            gasPrice: gasPrice
        };
        const initialBalanceWei = BN(await this.web3.eth.getBalance(selectedWallet.address));
        const signedTx = await this.web3.eth.accounts.signTransaction(tx, selectedWallet.privateKey);
        this.web3.eth.sendSignedTransaction(signedTx.rawTransaction)
            .on('transactionHash', (hash) => {
                updateStatusBox({
                    message: 'Transaction sent...',
                    status: 'pending',
                    txHash: hash,
                    direction: directionText
                });
            })
            .on('receipt', async (receipt) => {
                const finalBalanceWei = BN(await this.web3.eth.getBalance(selectedWallet.address));
                const ethReceivedWei = finalBalanceWei.sub(initialBalanceWei);
                const ethReceivedEther = this.web3.utils.fromWei(ethReceivedWei.toString(), 'ether');
                updateStatusBox({
                    message: `Successfully sold for ${ethReceivedEther} ETH`,
                    status: 'success',
                    quantity: ethReceivedEther,
                    txHash: receipt.transactionHash,
                    direction: directionText
                });
                this.updateMoneyInfo();
                this.fetchBalance();
            })
            .on('error', (err) => {
                updateStatusBox({
                    message: 'Transaction failed: ' + err.message,
                    status: 'error'
                });
            });
    }
} catch (error) {
    console.error('Money action error:', error);
    updateStatusBox({
        message: 'Transaction failed: ' + error.message,
        status: 'error'
    });
}
}

importCoin() {
const contractAddress = document.getElementById('coinContractAddress').value.trim();
if (!contractAddress || !this.web3.utils.isAddress(contractAddress)) {
    updateStatusBox({ message: 'Please enter a valid contract address.', status: 'error' });
    return;
}
if (this.coinList.some(coin => coin.address === contractAddress)) {
    updateStatusBox({ message: 'This coin is already imported.', status: 'error' });
    return;
}
this.coinList.push({ address: contractAddress });
this.saveCoinsToStorage();
this.displayCoinList();
document.getElementById('coinContractAddress').value = '';
updateStatusBox({ message: 'Coin imported successfully.', status: 'success' });
this.updateTotalUSDValue();
}

saveCoinsToStorage() {
Storage.set('importedCoins', this.coinList);
}

loadCoinsFromStorage() {
this.coinList = Storage.get('importedCoins');
this.displayCoinList();
}

async displayCoinList() {
const coinListDiv = document.getElementById('coinList');
if (this.coinList.length === 0) {
    coinListDiv.textContent = 'No coins imported yet.';
    return;
}
coinListDiv.innerHTML = '<h4>Imported Coins:</h4>';
const ul = document.createElement('ul');
for (const coin of this.coinList) {
    const li = document.createElement('li');
    try {
        const tokenContract = new this.web3.eth.Contract(this.erc20ABI, coin.address);
        const balanceWei = await tokenContract.methods.balanceOf(selectedWallet.address).call();
        const decimals = await tokenContract.methods.decimals().call();
        const balance = this.web3.utils.fromWei(balanceWei, 'ether');
        li.innerHTML = `<span class="wallet-address"><span>${coin.address.slice(0, 5)}</span>${coin.address.slice(5)}</span> - Balance: ${balance}`;
    } catch (error) {
        li.textContent = `${coin.address} - Error fetching balance`;
    }
    ul.appendChild(li);
}
coinListDiv.appendChild(ul);
this.updateTotalUSDValue();
}

updateConnectedWalletAddress() {
const addressDisplay = document.getElementById('connectedWalletAddress');
const addressText = document.getElementById('connectedAddressText');
if (selectedWallet) {
    addressDisplay.style.display = 'flex';
    addressText.textContent = selectedWallet.address;
} else {
    addressDisplay.style.display = 'none';
}
}

copyWalletAddress() {
if (!selectedWallet) return;
navigator.clipboard.writeText(selectedWallet.address).then(() => {
    const copyBtn = document.getElementById('copyAddressBtn');
    copyBtn.textContent = 'Copied!';
    setTimeout(() => {
        copyBtn.textContent = 'Copy';
    }, 2000);
    updateStatusBox({ message: 'Wallet address copied.', status: 'success' });
}).catch(err => {
    console.error('Failed to copy address:', err);
    updateStatusBox({ message: 'Failed to copy address.', status: 'error' });
});
}

exportWallets() {
if (this.wallets.length === 0) {
    updateStatusBox({ message: 'No wallets to export.', status: 'error' });
    return;
}
const data = JSON.stringify(this.wallets, null, 2);
const blob = new Blob([data], { type: 'application/json' });
const url = URL.createObjectURL(blob);
const a = document.createElement('a');
a.href = url;
a.download = 'moneyfund_wallets.json';
document.body.appendChild(a);
a.click();
document.body.removeChild(a);
URL.revokeObjectURL(url);
updateStatusBox({ message: 'Wallets exported successfully.', status: 'success' });
}

importWallets(event) {
const file = event.target.files[0];
if (!file) {
    updateStatusBox({ message: 'No file selected.', status: 'error' });
    return;
}
const reader = new FileReader();
reader.onload = (e) => {
    try {
        const importedWallets = JSON.parse(e.target.result);
        if (!Array.isArray(importedWallets)) {
            throw new Error('Invalid wallet data format.');
        }
        importedWallets.forEach(wallet => {
            if (!wallet.address || !wallet.privateKey || !wallet.type) {
                throw new Error('Invalid wallet data structure.');
            }
            if (!this.web3.utils.isAddress(wallet.address)) {
                throw new Error(`Invalid address: ${wallet.address}`);
            }
        });
        const existingAddresses = new Set(this.wallets.map(w => w.address.toLowerCase()));
        const newWallets = importedWallets.filter(wallet => !existingAddresses.has(wallet.address.toLowerCase()));
        this.wallets = [...this.wallets, ...newWallets];
        this.saveWalletsToBrowser();
        this.updateWalletSelector();
        updateStatusBox({ message: 'Wallets imported successfully.', status: 'success' });
        document.getElementById('importWalletFile').value = '';
    } catch (error) {
        console.error('Error importing wallets:', error);
        updateStatusBox({ message: `Failed to import wallets: ${error.message}`, status: 'error' });
    }
};
reader.readAsText(file);
}
}

const walletInterface = new WalletInterface();
walletInterface.init();
</script>
